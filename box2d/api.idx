nimTitle	api	box2d/api.html	module src/box2d/api		0
nim	b2TOIState	box2d/api.html#b2TOIState	enum b2TOIState		35
nim	b2BodyType	box2d/api.html#b2BodyType	enum b2BodyType		39
nim	b2ShapeType	box2d/api.html#b2ShapeType	enum b2ShapeType		43
nim	b2JointType	box2d/api.html#b2JointType	enum b2JointType		47
nim	b2HexColor	box2d/api.html#b2HexColor	enum b2HexColor		52
nim	b2_colorCyan	box2d/api.html#b2_colorCyan	const b2_colorCyan		129
nim	b2_colorLime	box2d/api.html#b2_colorLime	const b2_colorLime		131
nim	b2_colorMagenta	box2d/api.html#b2_colorMagenta	const b2_colorMagenta		133
nim	b2_colorNavyBlue	box2d/api.html#b2_colorNavyBlue	const b2_colorNavyBlue		135
nim	b2AllocFcn	box2d/api.html#b2AllocFcn	type b2AllocFcn		138
nim	b2FreeFcn	box2d/api.html#b2FreeFcn	type b2FreeFcn		140
nim	b2AssertFcn	box2d/api.html#b2AssertFcn	type b2AssertFcn		142
nim	b2Version	box2d/api.html#b2Version	object b2Version		144
nim	b2Timer	box2d/api.html#b2Timer	object b2Timer		149
nim	b2Vec2	box2d/api.html#b2Vec2	object b2Vec2		153
nim	b2Rot	box2d/api.html#b2Rot	object b2Rot		157
nim	b2Transform	box2d/api.html#b2Transform	object b2Transform		161
nim	b2Mat22	box2d/api.html#b2Mat22	object b2Mat22		165
nim	b2AABB	box2d/api.html#b2AABB	object b2AABB		169
nim	b2Circle	box2d/api.html#b2Circle	object b2Circle		173
nim	b2Capsule	box2d/api.html#b2Capsule	object b2Capsule		177
nim	b2DistanceCache	box2d/api.html#b2DistanceCache	object b2DistanceCache		182
nim	b2Polygon	box2d/api.html#b2Polygon	object b2Polygon		187
nim	b2Segment	box2d/api.html#b2Segment	object b2Segment		194
nim	b2SmoothSegment	box2d/api.html#b2SmoothSegment	object b2SmoothSegment		198
nim	b2Hull	box2d/api.html#b2Hull	object b2Hull		204
nim	b2RayCastInput	box2d/api.html#b2RayCastInput	object b2RayCastInput		208
nim	b2ShapeCastInput	box2d/api.html#b2ShapeCastInput	object b2ShapeCastInput		213
nim	b2CastOutput	box2d/api.html#b2CastOutput	object b2CastOutput		220
nim	b2MassData	box2d/api.html#b2MassData	object b2MassData		227
nim	b2SegmentDistanceResult	box2d/api.html#b2SegmentDistanceResult	object b2SegmentDistanceResult		232
nim	b2DistanceProxy	box2d/api.html#b2DistanceProxy	object b2DistanceProxy		239
nim	b2DistanceInput	box2d/api.html#b2DistanceInput	object b2DistanceInput		244
nim	b2DistanceOutput	box2d/api.html#b2DistanceOutput	object b2DistanceOutput		251
nim	b2SimplexVertex	box2d/api.html#b2SimplexVertex	object b2SimplexVertex		258
nim	b2Simplex	box2d/api.html#b2Simplex	object b2Simplex		266
nim	b2ShapeCastPairInput	box2d/api.html#b2ShapeCastPairInput	object b2ShapeCastPairInput		272
nim	b2Sweep	box2d/api.html#b2Sweep	object b2Sweep		280
nim	b2TOIInput	box2d/api.html#b2TOIInput	object b2TOIInput		287
nim	b2TOIOutput	box2d/api.html#b2TOIOutput	object b2TOIOutput		294
nim	b2ManifoldPoint	box2d/api.html#b2ManifoldPoint	object b2ManifoldPoint		298
nim	b2Manifold	box2d/api.html#b2Manifold	object b2Manifold		310
nim	b2TreeNode_anon0_t	box2d/api.html#b2TreeNode_anon0_t	object b2TreeNode_anon0_t		315
nim	b2TreeNode	box2d/api.html#b2TreeNode	object b2TreeNode		319
nim	b2DynamicTree	box2d/api.html#b2DynamicTree	object b2DynamicTree		330
nim	b2TreeQueryCallbackFcn	box2d/api.html#b2TreeQueryCallbackFcn	type b2TreeQueryCallbackFcn		343
nim	b2TreeRayCastCallbackFcn	box2d/api.html#b2TreeRayCastCallbackFcn	type b2TreeRayCastCallbackFcn		345
nim	b2TreeShapeCastCallbackFcn	box2d/api.html#b2TreeShapeCastCallbackFcn	type b2TreeShapeCastCallbackFcn		347
nim	b2WorldId	box2d/api.html#b2WorldId	object b2WorldId		349
nim	b2BodyId	box2d/api.html#b2BodyId	object b2BodyId		353
nim	b2ShapeId	box2d/api.html#b2ShapeId	object b2ShapeId		358
nim	b2JointId	box2d/api.html#b2JointId	object b2JointId		363
nim	b2ChainId	box2d/api.html#b2ChainId	object b2ChainId		368
nim	b2TaskCallback	box2d/api.html#b2TaskCallback	type b2TaskCallback		373
nim	b2EnqueueTaskCallback	box2d/api.html#b2EnqueueTaskCallback	type b2EnqueueTaskCallback		375
nim	b2FinishTaskCallback	box2d/api.html#b2FinishTaskCallback	type b2FinishTaskCallback		377
nim	b2RayResult	box2d/api.html#b2RayResult	object b2RayResult		379
nim	b2WorldDef	box2d/api.html#b2WorldDef	object b2WorldDef		386
nim	b2BodyDef	box2d/api.html#b2BodyDef	object b2BodyDef		404
nim	b2Filter	box2d/api.html#b2Filter	object b2Filter		424
nim	b2QueryFilter	box2d/api.html#b2QueryFilter	object b2QueryFilter		429
nim	b2ShapeDef	box2d/api.html#b2ShapeDef	object b2ShapeDef		433
nim	b2ChainDef	box2d/api.html#b2ChainDef	object b2ChainDef		448
nim	b2Profile	box2d/api.html#b2Profile	object b2Profile		458
nim	b2Counters	box2d/api.html#b2Counters	object b2Counters		482
nim	b2DistanceJointDef	box2d/api.html#b2DistanceJointDef	object b2DistanceJointDef		496
nim	b2MotorJointDef	box2d/api.html#b2MotorJointDef	object b2MotorJointDef		515
nim	b2MouseJointDef	box2d/api.html#b2MouseJointDef	object b2MouseJointDef		527
nim	b2PrismaticJointDef	box2d/api.html#b2PrismaticJointDef	object b2PrismaticJointDef		538
nim	b2RevoluteJointDef	box2d/api.html#b2RevoluteJointDef	object b2RevoluteJointDef		558
nim	b2WeldJointDef	box2d/api.html#b2WeldJointDef	object b2WeldJointDef		578
nim	b2WheelJointDef	box2d/api.html#b2WheelJointDef	object b2WheelJointDef		592
nim	b2SensorBeginTouchEvent	box2d/api.html#b2SensorBeginTouchEvent	object b2SensorBeginTouchEvent		611
nim	b2SensorEndTouchEvent	box2d/api.html#b2SensorEndTouchEvent	object b2SensorEndTouchEvent		615
nim	b2SensorEvents	box2d/api.html#b2SensorEvents	object b2SensorEvents		619
nim	b2ContactBeginTouchEvent	box2d/api.html#b2ContactBeginTouchEvent	object b2ContactBeginTouchEvent		625
nim	b2ContactEndTouchEvent	box2d/api.html#b2ContactEndTouchEvent	object b2ContactEndTouchEvent		629
nim	b2ContactHitEvent	box2d/api.html#b2ContactHitEvent	object b2ContactHitEvent		633
nim	b2ContactEvents	box2d/api.html#b2ContactEvents	object b2ContactEvents		640
nim	b2BodyMoveEvent	box2d/api.html#b2BodyMoveEvent	object b2BodyMoveEvent		648
nim	b2BodyEvents	box2d/api.html#b2BodyEvents	object b2BodyEvents		654
nim	b2ContactData	box2d/api.html#b2ContactData	object b2ContactData		658
nim	b2CustomFilterFcn	box2d/api.html#b2CustomFilterFcn	type b2CustomFilterFcn		663
nim	b2PreSolveFcn	box2d/api.html#b2PreSolveFcn	type b2PreSolveFcn		665
nim	b2OverlapResultFcn	box2d/api.html#b2OverlapResultFcn	type b2OverlapResultFcn		667
nim	b2CastResultFcn	box2d/api.html#b2CastResultFcn	type b2CastResultFcn		669
nim	b2DebugDraw	box2d/api.html#b2DebugDraw	object b2DebugDraw		671
nim	b2_pi	box2d/api.html#b2_pi	const b2_pi		697
nim	b2_maxPolygonVertices	box2d/api.html#b2_maxPolygonVertices	const b2_maxPolygonVertices		702
nim	b2_defaultCategoryBits	box2d/api.html#b2_defaultCategoryBits	const b2_defaultCategoryBits		707
nim	b2_defaultMaskBits	box2d/api.html#b2_defaultMaskBits	const b2_defaultMaskBits		712
nim	b2SetAllocator	box2d/api.html#b2SetAllocator,b2AllocFcn,b2FreeFcn	proc b2SetAllocator(allocFcn: b2AllocFcn; freeFcn: b2FreeFcn): void		716
nim	b2GetByteCount	box2d/api.html#b2GetByteCount	proc b2GetByteCount(): cint		718
nim	b2SetAssertFcn	box2d/api.html#b2SetAssertFcn,b2AssertFcn	proc b2SetAssertFcn(assertFcn: b2AssertFcn): void		720
nim	b2GetVersion	box2d/api.html#b2GetVersion	proc b2GetVersion(): b2Version		722
nim	b2CreateTimer	box2d/api.html#b2CreateTimer	proc b2CreateTimer(): b2Timer		724
nim	b2GetTicks	box2d/api.html#b2GetTicks,ptr.b2Timer	proc b2GetTicks(timer: ptr b2Timer): int64		726
nim	b2GetMilliseconds	box2d/api.html#b2GetMilliseconds,ptr.b2Timer	proc b2GetMilliseconds(timer: ptr b2Timer): cfloat		728
nim	b2GetMillisecondsAndReset	box2d/api.html#b2GetMillisecondsAndReset,ptr.b2Timer	proc b2GetMillisecondsAndReset(timer: ptr b2Timer): cfloat		730
nim	b2SleepMilliseconds	box2d/api.html#b2SleepMilliseconds,cint	proc b2SleepMilliseconds(milliseconds: cint): void		732
nim	b2Yield	box2d/api.html#b2Yield	proc b2Yield(): void		734
nim	b2Vec2_zero	box2d/api.html#b2Vec2_zero	const b2Vec2_zero		736
nim	b2Rot_identity	box2d/api.html#b2Rot_identity	const b2Rot_identity		737
nim	b2Transform_identity	box2d/api.html#b2Transform_identity	const b2Transform_identity		738
nim	b2Mat22_zero	box2d/api.html#b2Mat22_zero	const b2Mat22_zero		739
nim	b2IsValid	box2d/api.html#b2IsValid,cfloat	proc b2IsValid(a: cfloat): bool		741
nim	b2Vec2_IsValid	box2d/api.html#b2Vec2_IsValid,b2Vec2	proc b2Vec2_IsValid(v: b2Vec2): bool		743
nim	b2Rot_IsValid	box2d/api.html#b2Rot_IsValid,b2Rot	proc b2Rot_IsValid(q: b2Rot): bool		745
nim	b2AABB_IsValid	box2d/api.html#b2AABB_IsValid,b2AABB	proc b2AABB_IsValid(aabb: b2AABB): bool		747
nim	b2Normalize	box2d/api.html#b2Normalize,b2Vec2	proc b2Normalize(v: b2Vec2): b2Vec2		749
nim	b2NormalizeChecked	box2d/api.html#b2NormalizeChecked,b2Vec2	proc b2NormalizeChecked(v: b2Vec2): b2Vec2		751
nim	b2GetLengthAndNormalize	box2d/api.html#b2GetLengthAndNormalize,ptr.cfloat,b2Vec2	proc b2GetLengthAndNormalize(length: ptr cfloat; v: b2Vec2): b2Vec2		753
nim	b2SetLengthUnitsPerMeter	box2d/api.html#b2SetLengthUnitsPerMeter,cfloat	proc b2SetLengthUnitsPerMeter(lengthUnits: cfloat): void		755
nim	b2GetLengthUnitsPerMeter	box2d/api.html#b2GetLengthUnitsPerMeter	proc b2GetLengthUnitsPerMeter(): cfloat		757
nim	b2IsValidRay	box2d/api.html#b2IsValidRay,ptr.b2RayCastInput	proc b2IsValidRay(input: ptr b2RayCastInput): bool		759
nim	b2MakePolygon	box2d/api.html#b2MakePolygon,ptr.b2Hull,cfloat	proc b2MakePolygon(hull: ptr b2Hull; radius: cfloat): b2Polygon		761
nim	b2MakeOffsetPolygon	box2d/api.html#b2MakeOffsetPolygon,ptr.b2Hull,cfloat,b2Transform	proc b2MakeOffsetPolygon(hull: ptr b2Hull; radius: cfloat; transform: b2Transform): b2Polygon		763
nim	b2MakeSquare	box2d/api.html#b2MakeSquare,cfloat	proc b2MakeSquare(h: cfloat): b2Polygon		765
nim	b2MakeBox	box2d/api.html#b2MakeBox,cfloat,cfloat	proc b2MakeBox(hx: cfloat; hy: cfloat): b2Polygon		767
nim	b2MakeRoundedBox	box2d/api.html#b2MakeRoundedBox,cfloat,cfloat,cfloat	proc b2MakeRoundedBox(hx: cfloat; hy: cfloat; radius: cfloat): b2Polygon		769
nim	b2MakeOffsetBox	box2d/api.html#b2MakeOffsetBox,cfloat,cfloat,b2Vec2,cfloat	proc b2MakeOffsetBox(hx: cfloat; hy: cfloat; center: b2Vec2; angle: cfloat): b2Polygon		771
nim	b2TransformPolygon	box2d/api.html#b2TransformPolygon,b2Transform,ptr.b2Polygon	proc b2TransformPolygon(transform: b2Transform; polygon: ptr b2Polygon): b2Polygon		773
nim	b2ComputeCircleMass	box2d/api.html#b2ComputeCircleMass,ptr.b2Circle,cfloat	proc b2ComputeCircleMass(shape: ptr b2Circle; density: cfloat): b2MassData		775
nim	b2ComputeCapsuleMass	box2d/api.html#b2ComputeCapsuleMass,ptr.b2Capsule,cfloat	proc b2ComputeCapsuleMass(shape: ptr b2Capsule; density: cfloat): b2MassData		777
nim	b2ComputePolygonMass	box2d/api.html#b2ComputePolygonMass,ptr.b2Polygon,cfloat	proc b2ComputePolygonMass(shape: ptr b2Polygon; density: cfloat): b2MassData		779
nim	b2ComputeCircleAABB	box2d/api.html#b2ComputeCircleAABB,ptr.b2Circle,b2Transform	proc b2ComputeCircleAABB(shape: ptr b2Circle; transform: b2Transform): b2AABB		781
nim	b2ComputeCapsuleAABB	box2d/api.html#b2ComputeCapsuleAABB,ptr.b2Capsule,b2Transform	proc b2ComputeCapsuleAABB(shape: ptr b2Capsule; transform: b2Transform): b2AABB		783
nim	b2ComputePolygonAABB	box2d/api.html#b2ComputePolygonAABB,ptr.b2Polygon,b2Transform	proc b2ComputePolygonAABB(shape: ptr b2Polygon; transform: b2Transform): b2AABB		785
nim	b2ComputeSegmentAABB	box2d/api.html#b2ComputeSegmentAABB,ptr.b2Segment,b2Transform	proc b2ComputeSegmentAABB(shape: ptr b2Segment; transform: b2Transform): b2AABB		787
nim	b2PointInCircle	box2d/api.html#b2PointInCircle,b2Vec2,ptr.b2Circle	proc b2PointInCircle(point: b2Vec2; shape: ptr b2Circle): bool		789
nim	b2PointInCapsule	box2d/api.html#b2PointInCapsule,b2Vec2,ptr.b2Capsule	proc b2PointInCapsule(point: b2Vec2; shape: ptr b2Capsule): bool		791
nim	b2PointInPolygon	box2d/api.html#b2PointInPolygon,b2Vec2,ptr.b2Polygon	proc b2PointInPolygon(point: b2Vec2; shape: ptr b2Polygon): bool		793
nim	b2RayCastCircle	box2d/api.html#b2RayCastCircle,ptr.b2RayCastInput,ptr.b2Circle	proc b2RayCastCircle(input: ptr b2RayCastInput; shape: ptr b2Circle): b2CastOutput		795
nim	b2RayCastCapsule	box2d/api.html#b2RayCastCapsule,ptr.b2RayCastInput,ptr.b2Capsule	proc b2RayCastCapsule(input: ptr b2RayCastInput; shape: ptr b2Capsule): b2CastOutput		797
nim	b2RayCastSegment	box2d/api.html#b2RayCastSegment,ptr.b2RayCastInput,ptr.b2Segment,bool	proc b2RayCastSegment(input: ptr b2RayCastInput; shape: ptr b2Segment; oneSided: bool): b2CastOutput		799
nim	b2RayCastPolygon	box2d/api.html#b2RayCastPolygon,ptr.b2RayCastInput,ptr.b2Polygon	proc b2RayCastPolygon(input: ptr b2RayCastInput; shape: ptr b2Polygon): b2CastOutput		801
nim	b2ShapeCastCircle	box2d/api.html#b2ShapeCastCircle,ptr.b2ShapeCastInput,ptr.b2Circle	proc b2ShapeCastCircle(input: ptr b2ShapeCastInput; shape: ptr b2Circle): b2CastOutput		803
nim	b2ShapeCastCapsule	box2d/api.html#b2ShapeCastCapsule,ptr.b2ShapeCastInput,ptr.b2Capsule	proc b2ShapeCastCapsule(input: ptr b2ShapeCastInput; shape: ptr b2Capsule): b2CastOutput		805
nim	b2ShapeCastSegment	box2d/api.html#b2ShapeCastSegment,ptr.b2ShapeCastInput,ptr.b2Segment	proc b2ShapeCastSegment(input: ptr b2ShapeCastInput; shape: ptr b2Segment): b2CastOutput		807
nim	b2ShapeCastPolygon	box2d/api.html#b2ShapeCastPolygon,ptr.b2ShapeCastInput,ptr.b2Polygon	proc b2ShapeCastPolygon(input: ptr b2ShapeCastInput; shape: ptr b2Polygon): b2CastOutput		809
nim	b2ComputeHull	box2d/api.html#b2ComputeHull,ptr.b2Vec2,int32	proc b2ComputeHull(points: ptr b2Vec2; count: int32): b2Hull		811
nim	b2ValidateHull	box2d/api.html#b2ValidateHull,ptr.b2Hull	proc b2ValidateHull(hull: ptr b2Hull): bool		813
nim	b2SegmentDistance	box2d/api.html#b2SegmentDistance,b2Vec2,b2Vec2,b2Vec2,b2Vec2	proc b2SegmentDistance(p1: b2Vec2; q1: b2Vec2; p2: b2Vec2; q2: b2Vec2): b2SegmentDistanceResult		815
nim	b2_emptyDistanceCache	box2d/api.html#b2_emptyDistanceCache	var b2_emptyDistanceCache		817
nim	b2ShapeDistance	box2d/api.html#b2ShapeDistance,ptr.b2DistanceCache,ptr.b2DistanceInput,ptr.b2Simplex,cint	proc b2ShapeDistance(cache: ptr b2DistanceCache; input: ptr b2DistanceInput;\n                simplexes: ptr b2Simplex; simplexCapacity: cint): b2DistanceOutput		819
nim	b2ShapeCast	box2d/api.html#b2ShapeCast,ptr.b2ShapeCastPairInput	proc b2ShapeCast(input: ptr b2ShapeCastPairInput): b2CastOutput		821
nim	b2MakeProxy	box2d/api.html#b2MakeProxy,ptr.b2Vec2,int32,cfloat	proc b2MakeProxy(vertices: ptr b2Vec2; count: int32; radius: cfloat): b2DistanceProxy		823
nim	b2GetSweepTransform	box2d/api.html#b2GetSweepTransform,ptr.b2Sweep,cfloat	proc b2GetSweepTransform(sweep: ptr b2Sweep; time: cfloat): b2Transform		825
nim	b2TimeOfImpact	box2d/api.html#b2TimeOfImpact,ptr.b2TOIInput	proc b2TimeOfImpact(input: ptr b2TOIInput): b2TOIOutput		827
nim	b2CollideCircles	box2d/api.html#b2CollideCircles,ptr.b2Circle,b2Transform,ptr.b2Circle,b2Transform	proc b2CollideCircles(circleA: ptr b2Circle; xfA: b2Transform; circleB: ptr b2Circle;\n                 xfB: b2Transform): b2Manifold		829
nim	b2CollideCapsuleAndCircle	box2d/api.html#b2CollideCapsuleAndCircle,ptr.b2Capsule,b2Transform,ptr.b2Circle,b2Transform	proc b2CollideCapsuleAndCircle(capsuleA: ptr b2Capsule; xfA: b2Transform;\n                          circleB: ptr b2Circle; xfB: b2Transform): b2Manifold		831
nim	b2CollideSegmentAndCircle	box2d/api.html#b2CollideSegmentAndCircle,ptr.b2Segment,b2Transform,ptr.b2Circle,b2Transform	proc b2CollideSegmentAndCircle(segmentA: ptr b2Segment; xfA: b2Transform;\n                          circleB: ptr b2Circle; xfB: b2Transform): b2Manifold		833
nim	b2CollidePolygonAndCircle	box2d/api.html#b2CollidePolygonAndCircle,ptr.b2Polygon,b2Transform,ptr.b2Circle,b2Transform	proc b2CollidePolygonAndCircle(polygonA: ptr b2Polygon; xfA: b2Transform;\n                          circleB: ptr b2Circle; xfB: b2Transform): b2Manifold		835
nim	b2CollideCapsules	box2d/api.html#b2CollideCapsules,ptr.b2Capsule,b2Transform,ptr.b2Capsule,b2Transform	proc b2CollideCapsules(capsuleA: ptr b2Capsule; xfA: b2Transform;\n                  capsuleB: ptr b2Capsule; xfB: b2Transform): b2Manifold		837
nim	b2CollideSegmentAndCapsule	box2d/api.html#b2CollideSegmentAndCapsule,ptr.b2Segment,b2Transform,ptr.b2Capsule,b2Transform	proc b2CollideSegmentAndCapsule(segmentA: ptr b2Segment; xfA: b2Transform;\n                           capsuleB: ptr b2Capsule; xfB: b2Transform): b2Manifold		839
nim	b2CollidePolygonAndCapsule	box2d/api.html#b2CollidePolygonAndCapsule,ptr.b2Polygon,b2Transform,ptr.b2Capsule,b2Transform	proc b2CollidePolygonAndCapsule(polygonA: ptr b2Polygon; xfA: b2Transform;\n                           capsuleB: ptr b2Capsule; xfB: b2Transform): b2Manifold		841
nim	b2CollidePolygons	box2d/api.html#b2CollidePolygons,ptr.b2Polygon,b2Transform,ptr.b2Polygon,b2Transform	proc b2CollidePolygons(polygonA: ptr b2Polygon; xfA: b2Transform;\n                  polygonB: ptr b2Polygon; xfB: b2Transform): b2Manifold		843
nim	b2CollideSegmentAndPolygon	box2d/api.html#b2CollideSegmentAndPolygon,ptr.b2Segment,b2Transform,ptr.b2Polygon,b2Transform	proc b2CollideSegmentAndPolygon(segmentA: ptr b2Segment; xfA: b2Transform;\n                           polygonB: ptr b2Polygon; xfB: b2Transform): b2Manifold		845
nim	b2CollideSmoothSegmentAndCircle	box2d/api.html#b2CollideSmoothSegmentAndCircle,ptr.b2SmoothSegment,b2Transform,ptr.b2Circle,b2Transform	proc b2CollideSmoothSegmentAndCircle(smoothSegmentA: ptr b2SmoothSegment;\n                                xfA: b2Transform; circleB: ptr b2Circle;\n                                xfB: b2Transform): b2Manifold		847
nim	b2CollideSmoothSegmentAndCapsule	box2d/api.html#b2CollideSmoothSegmentAndCapsule,ptr.b2SmoothSegment,b2Transform,ptr.b2Capsule,b2Transform,ptr.b2DistanceCache	proc b2CollideSmoothSegmentAndCapsule(smoothSegmentA: ptr b2SmoothSegment;\n                                 xfA: b2Transform; capsuleB: ptr b2Capsule;\n                                 xfB: b2Transform; cache: ptr b2DistanceCache): b2Manifold		849
nim	b2CollideSmoothSegmentAndPolygon	box2d/api.html#b2CollideSmoothSegmentAndPolygon,ptr.b2SmoothSegment,b2Transform,ptr.b2Polygon,b2Transform,ptr.b2DistanceCache	proc b2CollideSmoothSegmentAndPolygon(smoothSegmentA: ptr b2SmoothSegment;\n                                 xfA: b2Transform; polygonB: ptr b2Polygon;\n                                 xfB: b2Transform; cache: ptr b2DistanceCache): b2Manifold		851
nim	b2DynamicTree_Create	box2d/api.html#b2DynamicTree_Create	proc b2DynamicTree_Create(): b2DynamicTree		853
nim	b2DynamicTree_Destroy	box2d/api.html#b2DynamicTree_Destroy,ptr.b2DynamicTree	proc b2DynamicTree_Destroy(tree: ptr b2DynamicTree): void		855
nim	b2DynamicTree_CreateProxy	box2d/api.html#b2DynamicTree_CreateProxy,ptr.b2DynamicTree,b2AABB,uint32,int32	proc b2DynamicTree_CreateProxy(tree: ptr b2DynamicTree; aabb: b2AABB;\n                          categoryBits: uint32; userData: int32): int32		857
nim	b2DynamicTree_DestroyProxy	box2d/api.html#b2DynamicTree_DestroyProxy,ptr.b2DynamicTree,int32	proc b2DynamicTree_DestroyProxy(tree: ptr b2DynamicTree; proxyId: int32): void		859
nim	b2DynamicTree_MoveProxy	box2d/api.html#b2DynamicTree_MoveProxy,ptr.b2DynamicTree,int32,b2AABB	proc b2DynamicTree_MoveProxy(tree: ptr b2DynamicTree; proxyId: int32; aabb: b2AABB): void		861
nim	b2DynamicTree_EnlargeProxy	box2d/api.html#b2DynamicTree_EnlargeProxy,ptr.b2DynamicTree,int32,b2AABB	proc b2DynamicTree_EnlargeProxy(tree: ptr b2DynamicTree; proxyId: int32; aabb: b2AABB): void		863
nim	b2DynamicTree_Query	box2d/api.html#b2DynamicTree_Query,ptr.b2DynamicTree,b2AABB,uint32,b2TreeQueryCallbackFcn,pointer	proc b2DynamicTree_Query(tree: ptr b2DynamicTree; aabb: b2AABB; maskBits: uint32;\n                    callback: b2TreeQueryCallbackFcn; context: pointer): void		865
nim	b2DynamicTree_RayCast	box2d/api.html#b2DynamicTree_RayCast,ptr.b2DynamicTree,ptr.b2RayCastInput,uint32,b2TreeRayCastCallbackFcn,pointer	proc b2DynamicTree_RayCast(tree: ptr b2DynamicTree; input: ptr b2RayCastInput;\n                      maskBits: uint32; callback: b2TreeRayCastCallbackFcn;\n                      context: pointer): void		867
nim	b2DynamicTree_ShapeCast	box2d/api.html#b2DynamicTree_ShapeCast,ptr.b2DynamicTree,ptr.b2ShapeCastInput,uint32,b2TreeShapeCastCallbackFcn,pointer	proc b2DynamicTree_ShapeCast(tree: ptr b2DynamicTree; input: ptr b2ShapeCastInput;\n                        maskBits: uint32; callback: b2TreeShapeCastCallbackFcn;\n                        context: pointer): void		869
nim	b2DynamicTree_Validate	box2d/api.html#b2DynamicTree_Validate,ptr.b2DynamicTree	proc b2DynamicTree_Validate(tree: ptr b2DynamicTree): void		871
nim	b2DynamicTree_GetHeight	box2d/api.html#b2DynamicTree_GetHeight,ptr.b2DynamicTree	proc b2DynamicTree_GetHeight(tree: ptr b2DynamicTree): cint		873
nim	b2DynamicTree_GetMaxBalance	box2d/api.html#b2DynamicTree_GetMaxBalance,ptr.b2DynamicTree	proc b2DynamicTree_GetMaxBalance(tree: ptr b2DynamicTree): cint		875
nim	b2DynamicTree_GetAreaRatio	box2d/api.html#b2DynamicTree_GetAreaRatio,ptr.b2DynamicTree	proc b2DynamicTree_GetAreaRatio(tree: ptr b2DynamicTree): cfloat		877
nim	b2DynamicTree_RebuildBottomUp	box2d/api.html#b2DynamicTree_RebuildBottomUp,ptr.b2DynamicTree	proc b2DynamicTree_RebuildBottomUp(tree: ptr b2DynamicTree): void		879
nim	b2DynamicTree_GetProxyCount	box2d/api.html#b2DynamicTree_GetProxyCount,ptr.b2DynamicTree	proc b2DynamicTree_GetProxyCount(tree: ptr b2DynamicTree): cint		881
nim	b2DynamicTree_Rebuild	box2d/api.html#b2DynamicTree_Rebuild,ptr.b2DynamicTree,bool	proc b2DynamicTree_Rebuild(tree: ptr b2DynamicTree; fullBuild: bool): cint		883
nim	b2DynamicTree_ShiftOrigin	box2d/api.html#b2DynamicTree_ShiftOrigin,ptr.b2DynamicTree,b2Vec2	proc b2DynamicTree_ShiftOrigin(tree: ptr b2DynamicTree; newOrigin: b2Vec2): void		885
nim	b2DynamicTree_GetByteCount	box2d/api.html#b2DynamicTree_GetByteCount,ptr.b2DynamicTree	proc b2DynamicTree_GetByteCount(tree: ptr b2DynamicTree): cint		887
nim	b2_nullWorldId	box2d/api.html#b2_nullWorldId	const b2_nullWorldId		889
nim	b2_nullBodyId	box2d/api.html#b2_nullBodyId	const b2_nullBodyId		890
nim	b2_nullShapeId	box2d/api.html#b2_nullShapeId	const b2_nullShapeId		891
nim	b2_nullJointId	box2d/api.html#b2_nullJointId	const b2_nullJointId		892
nim	b2_nullChainId	box2d/api.html#b2_nullChainId	const b2_nullChainId		893
nim	b2DefaultWorldDef	box2d/api.html#b2DefaultWorldDef	proc b2DefaultWorldDef(): b2WorldDef		895
nim	b2DefaultBodyDef	box2d/api.html#b2DefaultBodyDef	proc b2DefaultBodyDef(): b2BodyDef		897
nim	b2DefaultFilter	box2d/api.html#b2DefaultFilter	proc b2DefaultFilter(): b2Filter		899
nim	b2DefaultQueryFilter	box2d/api.html#b2DefaultQueryFilter	proc b2DefaultQueryFilter(): b2QueryFilter		901
nim	b2DefaultShapeDef	box2d/api.html#b2DefaultShapeDef	proc b2DefaultShapeDef(): b2ShapeDef		903
nim	b2DefaultChainDef	box2d/api.html#b2DefaultChainDef	proc b2DefaultChainDef(): b2ChainDef		905
nim	b2DefaultDistanceJointDef	box2d/api.html#b2DefaultDistanceJointDef	proc b2DefaultDistanceJointDef(): b2DistanceJointDef		907
nim	b2DefaultMotorJointDef	box2d/api.html#b2DefaultMotorJointDef	proc b2DefaultMotorJointDef(): b2MotorJointDef		909
nim	b2DefaultMouseJointDef	box2d/api.html#b2DefaultMouseJointDef	proc b2DefaultMouseJointDef(): b2MouseJointDef		911
nim	b2DefaultPrismaticJointDef	box2d/api.html#b2DefaultPrismaticJointDef	proc b2DefaultPrismaticJointDef(): b2PrismaticJointDef		913
nim	b2DefaultRevoluteJointDef	box2d/api.html#b2DefaultRevoluteJointDef	proc b2DefaultRevoluteJointDef(): b2RevoluteJointDef		915
nim	b2DefaultWeldJointDef	box2d/api.html#b2DefaultWeldJointDef	proc b2DefaultWeldJointDef(): b2WeldJointDef		917
nim	b2DefaultWheelJointDef	box2d/api.html#b2DefaultWheelJointDef	proc b2DefaultWheelJointDef(): b2WheelJointDef		919
nim	b2CreateWorld	box2d/api.html#b2CreateWorld,ptr.b2WorldDef	proc b2CreateWorld(def: ptr b2WorldDef): b2WorldId		921
nim	b2DestroyWorld	box2d/api.html#b2DestroyWorld,b2WorldId	proc b2DestroyWorld(worldId: b2WorldId): void		923
nim	b2World_IsValid	box2d/api.html#b2World_IsValid,b2WorldId	proc b2World_IsValid(id: b2WorldId): bool		925
nim	b2World_Step	box2d/api.html#b2World_Step,b2WorldId,cfloat,cint	proc b2World_Step(worldId: b2WorldId; timeStep: cfloat; subStepCount: cint): void		927
nim	b2World_Draw	box2d/api.html#b2World_Draw,b2WorldId,ptr.b2DebugDraw	proc b2World_Draw(worldId: b2WorldId; draw: ptr b2DebugDraw): void		929
nim	b2World_GetBodyEvents	box2d/api.html#b2World_GetBodyEvents,b2WorldId	proc b2World_GetBodyEvents(worldId: b2WorldId): b2BodyEvents		931
nim	b2World_GetSensorEvents	box2d/api.html#b2World_GetSensorEvents,b2WorldId	proc b2World_GetSensorEvents(worldId: b2WorldId): b2SensorEvents		933
nim	b2World_GetContactEvents	box2d/api.html#b2World_GetContactEvents,b2WorldId	proc b2World_GetContactEvents(worldId: b2WorldId): b2ContactEvents		935
nim	b2World_OverlapAABB	box2d/api.html#b2World_OverlapAABB,b2WorldId,b2AABB,b2QueryFilter,b2OverlapResultFcn,pointer	proc b2World_OverlapAABB(worldId: b2WorldId; aabb: b2AABB; filter: b2QueryFilter;\n                    fcn: b2OverlapResultFcn; context: pointer): void		937
nim	b2World_OverlapCircle	box2d/api.html#b2World_OverlapCircle,b2WorldId,ptr.b2Circle,b2Transform,b2QueryFilter,b2OverlapResultFcn,pointer	proc b2World_OverlapCircle(worldId: b2WorldId; circle: ptr b2Circle;\n                      transform: b2Transform; filter: b2QueryFilter;\n                      fcn: b2OverlapResultFcn; context: pointer): void		939
nim	b2World_OverlapCapsule	box2d/api.html#b2World_OverlapCapsule,b2WorldId,ptr.b2Capsule,b2Transform,b2QueryFilter,b2OverlapResultFcn,pointer	proc b2World_OverlapCapsule(worldId: b2WorldId; capsule: ptr b2Capsule;\n                       transform: b2Transform; filter: b2QueryFilter;\n                       fcn: b2OverlapResultFcn; context: pointer): void		941
nim	b2World_OverlapPolygon	box2d/api.html#b2World_OverlapPolygon,b2WorldId,ptr.b2Polygon,b2Transform,b2QueryFilter,b2OverlapResultFcn,pointer	proc b2World_OverlapPolygon(worldId: b2WorldId; polygon: ptr b2Polygon;\n                       transform: b2Transform; filter: b2QueryFilter;\n                       fcn: b2OverlapResultFcn; context: pointer): void		943
nim	b2World_CastRay	box2d/api.html#b2World_CastRay,b2WorldId,b2Vec2,b2Vec2,b2QueryFilter,b2CastResultFcn,pointer	proc b2World_CastRay(worldId: b2WorldId; origin: b2Vec2; translation: b2Vec2;\n                filter: b2QueryFilter; fcn: b2CastResultFcn; context: pointer): void		945
nim	b2World_CastRayClosest	box2d/api.html#b2World_CastRayClosest,b2WorldId,b2Vec2,b2Vec2,b2QueryFilter	proc b2World_CastRayClosest(worldId: b2WorldId; origin: b2Vec2; translation: b2Vec2;\n                       filter: b2QueryFilter): b2RayResult		947
nim	b2World_CastCircle	box2d/api.html#b2World_CastCircle,b2WorldId,ptr.b2Circle,b2Transform,b2Vec2,b2QueryFilter,b2CastResultFcn,pointer	proc b2World_CastCircle(worldId: b2WorldId; circle: ptr b2Circle;\n                   originTransform: b2Transform; translation: b2Vec2;\n                   filter: b2QueryFilter; fcn: b2CastResultFcn; context: pointer): void		949
nim	b2World_CastCapsule	box2d/api.html#b2World_CastCapsule,b2WorldId,ptr.b2Capsule,b2Transform,b2Vec2,b2QueryFilter,b2CastResultFcn,pointer	proc b2World_CastCapsule(worldId: b2WorldId; capsule: ptr b2Capsule;\n                    originTransform: b2Transform; translation: b2Vec2;\n                    filter: b2QueryFilter; fcn: b2CastResultFcn;\n                    context: pointer): void		951
nim	b2World_CastPolygon	box2d/api.html#b2World_CastPolygon,b2WorldId,ptr.b2Polygon,b2Transform,b2Vec2,b2QueryFilter,b2CastResultFcn,pointer	proc b2World_CastPolygon(worldId: b2WorldId; polygon: ptr b2Polygon;\n                    originTransform: b2Transform; translation: b2Vec2;\n                    filter: b2QueryFilter; fcn: b2CastResultFcn;\n                    context: pointer): void		953
nim	b2World_EnableSleeping	box2d/api.html#b2World_EnableSleeping,b2WorldId,bool	proc b2World_EnableSleeping(worldId: b2WorldId; flag: bool): void		955
nim	b2World_EnableContinuous	box2d/api.html#b2World_EnableContinuous,b2WorldId,bool	proc b2World_EnableContinuous(worldId: b2WorldId; flag: bool): void		957
nim	b2World_SetRestitutionThreshold	box2d/api.html#b2World_SetRestitutionThreshold,b2WorldId,cfloat	proc b2World_SetRestitutionThreshold(worldId: b2WorldId; value: cfloat): void		959
nim	b2World_SetHitEventThreshold	box2d/api.html#b2World_SetHitEventThreshold,b2WorldId,cfloat	proc b2World_SetHitEventThreshold(worldId: b2WorldId; value: cfloat): void		961
nim	b2World_SetCustomFilterCallback	box2d/api.html#b2World_SetCustomFilterCallback,b2WorldId,b2CustomFilterFcn,pointer	proc b2World_SetCustomFilterCallback(worldId: b2WorldId; fcn: b2CustomFilterFcn;\n                                context: pointer): void		963
nim	b2World_SetPreSolveCallback	box2d/api.html#b2World_SetPreSolveCallback,b2WorldId,b2PreSolveFcn,pointer	proc b2World_SetPreSolveCallback(worldId: b2WorldId; fcn: b2PreSolveFcn;\n                            context: pointer): void		965
nim	b2World_SetGravity	box2d/api.html#b2World_SetGravity,b2WorldId,b2Vec2	proc b2World_SetGravity(worldId: b2WorldId; gravity: b2Vec2): void		967
nim	b2World_GetGravity	box2d/api.html#b2World_GetGravity,b2WorldId	proc b2World_GetGravity(worldId: b2WorldId): b2Vec2		969
nim	b2World_Explode	box2d/api.html#b2World_Explode,b2WorldId,b2Vec2,cfloat,cfloat	proc b2World_Explode(worldId: b2WorldId; position: b2Vec2; radius: cfloat;\n                impulse: cfloat): void		971
nim	b2World_SetContactTuning	box2d/api.html#b2World_SetContactTuning,b2WorldId,cfloat,cfloat,cfloat	proc b2World_SetContactTuning(worldId: b2WorldId; hertz: cfloat;\n                         dampingRatio: cfloat; pushVelocity: cfloat): void		973
nim	b2World_EnableWarmStarting	box2d/api.html#b2World_EnableWarmStarting,b2WorldId,bool	proc b2World_EnableWarmStarting(worldId: b2WorldId; flag: bool): void		975
nim	b2World_GetProfile	box2d/api.html#b2World_GetProfile,b2WorldId	proc b2World_GetProfile(worldId: b2WorldId): b2Profile		977
nim	b2World_GetCounters	box2d/api.html#b2World_GetCounters,b2WorldId	proc b2World_GetCounters(worldId: b2WorldId): b2Counters		979
nim	b2World_DumpMemoryStats	box2d/api.html#b2World_DumpMemoryStats,b2WorldId	proc b2World_DumpMemoryStats(worldId: b2WorldId): void		981
nim	b2CreateBody	box2d/api.html#b2CreateBody,b2WorldId,ptr.b2BodyDef	proc b2CreateBody(worldId: b2WorldId; def: ptr b2BodyDef): b2BodyId		983
nim	b2DestroyBody	box2d/api.html#b2DestroyBody,b2BodyId	proc b2DestroyBody(bodyId: b2BodyId): void		985
nim	b2Body_IsValid	box2d/api.html#b2Body_IsValid,b2BodyId	proc b2Body_IsValid(id: b2BodyId): bool		987
nim	b2Body_GetType	box2d/api.html#b2Body_GetType,b2BodyId	proc b2Body_GetType(bodyId: b2BodyId): b2BodyType		989
nim	b2Body_SetType	box2d/api.html#b2Body_SetType,b2BodyId,b2BodyType	proc b2Body_SetType(bodyId: b2BodyId; bodyType: b2BodyType): void		991
nim	b2Body_SetUserData	box2d/api.html#b2Body_SetUserData,b2BodyId,pointer	proc b2Body_SetUserData(bodyId: b2BodyId; userData: pointer): void		993
nim	b2Body_GetUserData	box2d/api.html#b2Body_GetUserData,b2BodyId	proc b2Body_GetUserData(bodyId: b2BodyId): pointer		995
nim	b2Body_GetPosition	box2d/api.html#b2Body_GetPosition,b2BodyId	proc b2Body_GetPosition(bodyId: b2BodyId): b2Vec2		997
nim	b2Body_GetRotation	box2d/api.html#b2Body_GetRotation,b2BodyId	proc b2Body_GetRotation(bodyId: b2BodyId): b2Rot		999
nim	b2Body_GetTransform	box2d/api.html#b2Body_GetTransform,b2BodyId	proc b2Body_GetTransform(bodyId: b2BodyId): b2Transform		1001
nim	b2Body_SetTransform	box2d/api.html#b2Body_SetTransform,b2BodyId,b2Vec2,b2Rot	proc b2Body_SetTransform(bodyId: b2BodyId; position: b2Vec2; rotation: b2Rot): void		1003
nim	b2Body_GetLocalPoint	box2d/api.html#b2Body_GetLocalPoint,b2BodyId,b2Vec2	proc b2Body_GetLocalPoint(bodyId: b2BodyId; worldPoint: b2Vec2): b2Vec2		1005
nim	b2Body_GetWorldPoint	box2d/api.html#b2Body_GetWorldPoint,b2BodyId,b2Vec2	proc b2Body_GetWorldPoint(bodyId: b2BodyId; localPoint: b2Vec2): b2Vec2		1007
nim	b2Body_GetLocalVector	box2d/api.html#b2Body_GetLocalVector,b2BodyId,b2Vec2	proc b2Body_GetLocalVector(bodyId: b2BodyId; worldVector: b2Vec2): b2Vec2		1009
nim	b2Body_GetWorldVector	box2d/api.html#b2Body_GetWorldVector,b2BodyId,b2Vec2	proc b2Body_GetWorldVector(bodyId: b2BodyId; localVector: b2Vec2): b2Vec2		1011
nim	b2Body_GetLinearVelocity	box2d/api.html#b2Body_GetLinearVelocity,b2BodyId	proc b2Body_GetLinearVelocity(bodyId: b2BodyId): b2Vec2		1013
nim	b2Body_GetAngularVelocity	box2d/api.html#b2Body_GetAngularVelocity,b2BodyId	proc b2Body_GetAngularVelocity(bodyId: b2BodyId): cfloat		1015
nim	b2Body_SetLinearVelocity	box2d/api.html#b2Body_SetLinearVelocity,b2BodyId,b2Vec2	proc b2Body_SetLinearVelocity(bodyId: b2BodyId; linearVelocity: b2Vec2): void		1017
nim	b2Body_SetAngularVelocity	box2d/api.html#b2Body_SetAngularVelocity,b2BodyId,cfloat	proc b2Body_SetAngularVelocity(bodyId: b2BodyId; angularVelocity: cfloat): void		1019
nim	b2Body_ApplyForce	box2d/api.html#b2Body_ApplyForce,b2BodyId,b2Vec2,b2Vec2,bool	proc b2Body_ApplyForce(bodyId: b2BodyId; force: b2Vec2; point: b2Vec2; wake: bool): void		1021
nim	b2Body_ApplyForceToCenter	box2d/api.html#b2Body_ApplyForceToCenter,b2BodyId,b2Vec2,bool	proc b2Body_ApplyForceToCenter(bodyId: b2BodyId; force: b2Vec2; wake: bool): void		1023
nim	b2Body_ApplyTorque	box2d/api.html#b2Body_ApplyTorque,b2BodyId,cfloat,bool	proc b2Body_ApplyTorque(bodyId: b2BodyId; torque: cfloat; wake: bool): void		1025
nim	b2Body_ApplyLinearImpulse	box2d/api.html#b2Body_ApplyLinearImpulse,b2BodyId,b2Vec2,b2Vec2,bool	proc b2Body_ApplyLinearImpulse(bodyId: b2BodyId; impulse: b2Vec2; point: b2Vec2;\n                          wake: bool): void		1027
nim	b2Body_ApplyLinearImpulseToCenter	box2d/api.html#b2Body_ApplyLinearImpulseToCenter,b2BodyId,b2Vec2,bool	proc b2Body_ApplyLinearImpulseToCenter(bodyId: b2BodyId; impulse: b2Vec2; wake: bool): void		1029
nim	b2Body_ApplyAngularImpulse	box2d/api.html#b2Body_ApplyAngularImpulse,b2BodyId,cfloat,bool	proc b2Body_ApplyAngularImpulse(bodyId: b2BodyId; impulse: cfloat; wake: bool): void		1031
nim	b2Body_GetMass	box2d/api.html#b2Body_GetMass,b2BodyId	proc b2Body_GetMass(bodyId: b2BodyId): cfloat		1033
nim	b2Body_GetInertiaTensor	box2d/api.html#b2Body_GetInertiaTensor,b2BodyId	proc b2Body_GetInertiaTensor(bodyId: b2BodyId): cfloat		1035
nim	b2Body_GetLocalCenterOfMass	box2d/api.html#b2Body_GetLocalCenterOfMass,b2BodyId	proc b2Body_GetLocalCenterOfMass(bodyId: b2BodyId): b2Vec2		1037
nim	b2Body_GetWorldCenterOfMass	box2d/api.html#b2Body_GetWorldCenterOfMass,b2BodyId	proc b2Body_GetWorldCenterOfMass(bodyId: b2BodyId): b2Vec2		1039
nim	b2Body_SetMassData	box2d/api.html#b2Body_SetMassData,b2BodyId,b2MassData	proc b2Body_SetMassData(bodyId: b2BodyId; massData: b2MassData): void		1041
nim	b2Body_GetMassData	box2d/api.html#b2Body_GetMassData,b2BodyId	proc b2Body_GetMassData(bodyId: b2BodyId): b2MassData		1043
nim	b2Body_ApplyMassFromShapes	box2d/api.html#b2Body_ApplyMassFromShapes,b2BodyId	proc b2Body_ApplyMassFromShapes(bodyId: b2BodyId): void		1045
nim	b2Body_SetAutomaticMass	box2d/api.html#b2Body_SetAutomaticMass,b2BodyId,bool	proc b2Body_SetAutomaticMass(bodyId: b2BodyId; automaticMass: bool): void		1047
nim	b2Body_GetAutomaticMass	box2d/api.html#b2Body_GetAutomaticMass,b2BodyId	proc b2Body_GetAutomaticMass(bodyId: b2BodyId): bool		1049
nim	b2Body_SetLinearDamping	box2d/api.html#b2Body_SetLinearDamping,b2BodyId,cfloat	proc b2Body_SetLinearDamping(bodyId: b2BodyId; linearDamping: cfloat): void		1051
nim	b2Body_GetLinearDamping	box2d/api.html#b2Body_GetLinearDamping,b2BodyId	proc b2Body_GetLinearDamping(bodyId: b2BodyId): cfloat		1053
nim	b2Body_SetAngularDamping	box2d/api.html#b2Body_SetAngularDamping,b2BodyId,cfloat	proc b2Body_SetAngularDamping(bodyId: b2BodyId; angularDamping: cfloat): void		1055
nim	b2Body_GetAngularDamping	box2d/api.html#b2Body_GetAngularDamping,b2BodyId	proc b2Body_GetAngularDamping(bodyId: b2BodyId): cfloat		1057
nim	b2Body_SetGravityScale	box2d/api.html#b2Body_SetGravityScale,b2BodyId,cfloat	proc b2Body_SetGravityScale(bodyId: b2BodyId; gravityScale: cfloat): void		1059
nim	b2Body_GetGravityScale	box2d/api.html#b2Body_GetGravityScale,b2BodyId	proc b2Body_GetGravityScale(bodyId: b2BodyId): cfloat		1061
nim	b2Body_IsAwake	box2d/api.html#b2Body_IsAwake,b2BodyId	proc b2Body_IsAwake(bodyId: b2BodyId): bool		1063
nim	b2Body_SetAwake	box2d/api.html#b2Body_SetAwake,b2BodyId,bool	proc b2Body_SetAwake(bodyId: b2BodyId; awake: bool): void		1065
nim	b2Body_EnableSleep	box2d/api.html#b2Body_EnableSleep,b2BodyId,bool	proc b2Body_EnableSleep(bodyId: b2BodyId; enableSleep: bool): void		1067
nim	b2Body_IsSleepEnabled	box2d/api.html#b2Body_IsSleepEnabled,b2BodyId	proc b2Body_IsSleepEnabled(bodyId: b2BodyId): bool		1069
nim	b2Body_SetSleepThreshold	box2d/api.html#b2Body_SetSleepThreshold,b2BodyId,cfloat	proc b2Body_SetSleepThreshold(bodyId: b2BodyId; sleepVelocity: cfloat): void		1071
nim	b2Body_GetSleepThreshold	box2d/api.html#b2Body_GetSleepThreshold,b2BodyId	proc b2Body_GetSleepThreshold(bodyId: b2BodyId): cfloat		1073
nim	b2Body_IsEnabled	box2d/api.html#b2Body_IsEnabled,b2BodyId	proc b2Body_IsEnabled(bodyId: b2BodyId): bool		1075
nim	b2Body_Disable	box2d/api.html#b2Body_Disable,b2BodyId	proc b2Body_Disable(bodyId: b2BodyId): void		1077
nim	b2Body_Enable	box2d/api.html#b2Body_Enable,b2BodyId	proc b2Body_Enable(bodyId: b2BodyId): void		1079
nim	b2Body_SetFixedRotation	box2d/api.html#b2Body_SetFixedRotation,b2BodyId,bool	proc b2Body_SetFixedRotation(bodyId: b2BodyId; flag: bool): void		1081
nim	b2Body_IsFixedRotation	box2d/api.html#b2Body_IsFixedRotation,b2BodyId	proc b2Body_IsFixedRotation(bodyId: b2BodyId): bool		1083
nim	b2Body_SetBullet	box2d/api.html#b2Body_SetBullet,b2BodyId,bool	proc b2Body_SetBullet(bodyId: b2BodyId; flag: bool): void		1085
nim	b2Body_IsBullet	box2d/api.html#b2Body_IsBullet,b2BodyId	proc b2Body_IsBullet(bodyId: b2BodyId): bool		1087
nim	b2Body_EnableHitEvents	box2d/api.html#b2Body_EnableHitEvents,b2BodyId,bool	proc b2Body_EnableHitEvents(bodyId: b2BodyId; enableHitEvents: bool): void		1089
nim	b2Body_GetShapeCount	box2d/api.html#b2Body_GetShapeCount,b2BodyId	proc b2Body_GetShapeCount(bodyId: b2BodyId): cint		1091
nim	b2Body_GetShapes	box2d/api.html#b2Body_GetShapes,b2BodyId,ptr.b2ShapeId,cint	proc b2Body_GetShapes(bodyId: b2BodyId; shapeArray: ptr b2ShapeId; capacity: cint): cint		1093
nim	b2Body_GetJointCount	box2d/api.html#b2Body_GetJointCount,b2BodyId	proc b2Body_GetJointCount(bodyId: b2BodyId): cint		1095
nim	b2Body_GetJoints	box2d/api.html#b2Body_GetJoints,b2BodyId,ptr.b2JointId,cint	proc b2Body_GetJoints(bodyId: b2BodyId; jointArray: ptr b2JointId; capacity: cint): cint		1097
nim	b2Body_GetContactCapacity	box2d/api.html#b2Body_GetContactCapacity,b2BodyId	proc b2Body_GetContactCapacity(bodyId: b2BodyId): cint		1099
nim	b2Body_GetContactData	box2d/api.html#b2Body_GetContactData,b2BodyId,ptr.b2ContactData,cint	proc b2Body_GetContactData(bodyId: b2BodyId; contactData: ptr b2ContactData;\n                      capacity: cint): cint		1101
nim	b2Body_ComputeAABB	box2d/api.html#b2Body_ComputeAABB,b2BodyId	proc b2Body_ComputeAABB(bodyId: b2BodyId): b2AABB		1103
nim	b2CreateCircleShape	box2d/api.html#b2CreateCircleShape,b2BodyId,ptr.b2ShapeDef,ptr.b2Circle	proc b2CreateCircleShape(bodyId: b2BodyId; def: ptr b2ShapeDef; circle: ptr b2Circle): b2ShapeId		1105
nim	b2CreateSegmentShape	box2d/api.html#b2CreateSegmentShape,b2BodyId,ptr.b2ShapeDef,ptr.b2Segment	proc b2CreateSegmentShape(bodyId: b2BodyId; def: ptr b2ShapeDef;\n                     segment: ptr b2Segment): b2ShapeId		1107
nim	b2CreateCapsuleShape	box2d/api.html#b2CreateCapsuleShape,b2BodyId,ptr.b2ShapeDef,ptr.b2Capsule	proc b2CreateCapsuleShape(bodyId: b2BodyId; def: ptr b2ShapeDef;\n                     capsule: ptr b2Capsule): b2ShapeId		1109
nim	b2CreatePolygonShape	box2d/api.html#b2CreatePolygonShape,b2BodyId,ptr.b2ShapeDef,ptr.b2Polygon	proc b2CreatePolygonShape(bodyId: b2BodyId; def: ptr b2ShapeDef;\n                     polygon: ptr b2Polygon): b2ShapeId		1111
nim	b2DestroyShape	box2d/api.html#b2DestroyShape,b2ShapeId	proc b2DestroyShape(shapeId: b2ShapeId): void		1113
nim	b2Shape_IsValid	box2d/api.html#b2Shape_IsValid,b2ShapeId	proc b2Shape_IsValid(id: b2ShapeId): bool		1115
nim	b2Shape_GetType	box2d/api.html#b2Shape_GetType,b2ShapeId	proc b2Shape_GetType(shapeId: b2ShapeId): b2ShapeType		1117
nim	b2Shape_GetBody	box2d/api.html#b2Shape_GetBody,b2ShapeId	proc b2Shape_GetBody(shapeId: b2ShapeId): b2BodyId		1119
nim	b2Shape_IsSensor	box2d/api.html#b2Shape_IsSensor,b2ShapeId	proc b2Shape_IsSensor(shapeId: b2ShapeId): bool		1121
nim	b2Shape_SetUserData	box2d/api.html#b2Shape_SetUserData,b2ShapeId,pointer	proc b2Shape_SetUserData(shapeId: b2ShapeId; userData: pointer): void		1123
nim	b2Shape_GetUserData	box2d/api.html#b2Shape_GetUserData,b2ShapeId	proc b2Shape_GetUserData(shapeId: b2ShapeId): pointer		1125
nim	b2Shape_SetDensity	box2d/api.html#b2Shape_SetDensity,b2ShapeId,cfloat	proc b2Shape_SetDensity(shapeId: b2ShapeId; density: cfloat): void		1127
nim	b2Shape_GetDensity	box2d/api.html#b2Shape_GetDensity,b2ShapeId	proc b2Shape_GetDensity(shapeId: b2ShapeId): cfloat		1129
nim	b2Shape_SetFriction	box2d/api.html#b2Shape_SetFriction,b2ShapeId,cfloat	proc b2Shape_SetFriction(shapeId: b2ShapeId; friction: cfloat): void		1131
nim	b2Shape_GetFriction	box2d/api.html#b2Shape_GetFriction,b2ShapeId	proc b2Shape_GetFriction(shapeId: b2ShapeId): cfloat		1133
nim	b2Shape_SetRestitution	box2d/api.html#b2Shape_SetRestitution,b2ShapeId,cfloat	proc b2Shape_SetRestitution(shapeId: b2ShapeId; restitution: cfloat): void		1135
nim	b2Shape_GetRestitution	box2d/api.html#b2Shape_GetRestitution,b2ShapeId	proc b2Shape_GetRestitution(shapeId: b2ShapeId): cfloat		1137
nim	b2Shape_GetFilter	box2d/api.html#b2Shape_GetFilter,b2ShapeId	proc b2Shape_GetFilter(shapeId: b2ShapeId): b2Filter		1139
nim	b2Shape_SetFilter	box2d/api.html#b2Shape_SetFilter,b2ShapeId,b2Filter	proc b2Shape_SetFilter(shapeId: b2ShapeId; filter: b2Filter): void		1141
nim	b2Shape_EnableSensorEvents	box2d/api.html#b2Shape_EnableSensorEvents,b2ShapeId,bool	proc b2Shape_EnableSensorEvents(shapeId: b2ShapeId; flag: bool): void		1143
nim	b2Shape_AreSensorEventsEnabled	box2d/api.html#b2Shape_AreSensorEventsEnabled,b2ShapeId	proc b2Shape_AreSensorEventsEnabled(shapeId: b2ShapeId): bool		1145
nim	b2Shape_EnableContactEvents	box2d/api.html#b2Shape_EnableContactEvents,b2ShapeId,bool	proc b2Shape_EnableContactEvents(shapeId: b2ShapeId; flag: bool): void		1147
nim	b2Shape_AreContactEventsEnabled	box2d/api.html#b2Shape_AreContactEventsEnabled,b2ShapeId	proc b2Shape_AreContactEventsEnabled(shapeId: b2ShapeId): bool		1149
nim	b2Shape_EnablePreSolveEvents	box2d/api.html#b2Shape_EnablePreSolveEvents,b2ShapeId,bool	proc b2Shape_EnablePreSolveEvents(shapeId: b2ShapeId; flag: bool): void		1151
nim	b2Shape_ArePreSolveEventsEnabled	box2d/api.html#b2Shape_ArePreSolveEventsEnabled,b2ShapeId	proc b2Shape_ArePreSolveEventsEnabled(shapeId: b2ShapeId): bool		1153
nim	b2Shape_EnableHitEvents	box2d/api.html#b2Shape_EnableHitEvents,b2ShapeId,bool	proc b2Shape_EnableHitEvents(shapeId: b2ShapeId; flag: bool): void		1155
nim	b2Shape_AreHitEventsEnabled	box2d/api.html#b2Shape_AreHitEventsEnabled,b2ShapeId	proc b2Shape_AreHitEventsEnabled(shapeId: b2ShapeId): bool		1157
nim	b2Shape_TestPoint	box2d/api.html#b2Shape_TestPoint,b2ShapeId,b2Vec2	proc b2Shape_TestPoint(shapeId: b2ShapeId; point: b2Vec2): bool		1159
nim	b2Shape_RayCast	box2d/api.html#b2Shape_RayCast,b2ShapeId,b2Vec2,b2Vec2	proc b2Shape_RayCast(shapeId: b2ShapeId; origin: b2Vec2; translation: b2Vec2): b2CastOutput		1161
nim	b2Shape_GetCircle	box2d/api.html#b2Shape_GetCircle,b2ShapeId	proc b2Shape_GetCircle(shapeId: b2ShapeId): b2Circle		1163
nim	b2Shape_GetSegment	box2d/api.html#b2Shape_GetSegment,b2ShapeId	proc b2Shape_GetSegment(shapeId: b2ShapeId): b2Segment		1165
nim	b2Shape_GetSmoothSegment	box2d/api.html#b2Shape_GetSmoothSegment,b2ShapeId	proc b2Shape_GetSmoothSegment(shapeId: b2ShapeId): b2SmoothSegment		1167
nim	b2Shape_GetCapsule	box2d/api.html#b2Shape_GetCapsule,b2ShapeId	proc b2Shape_GetCapsule(shapeId: b2ShapeId): b2Capsule		1169
nim	b2Shape_GetPolygon	box2d/api.html#b2Shape_GetPolygon,b2ShapeId	proc b2Shape_GetPolygon(shapeId: b2ShapeId): b2Polygon		1171
nim	b2Shape_SetCircle	box2d/api.html#b2Shape_SetCircle,b2ShapeId,ptr.b2Circle	proc b2Shape_SetCircle(shapeId: b2ShapeId; circle: ptr b2Circle): void		1173
nim	b2Shape_SetCapsule	box2d/api.html#b2Shape_SetCapsule,b2ShapeId,ptr.b2Capsule	proc b2Shape_SetCapsule(shapeId: b2ShapeId; capsule: ptr b2Capsule): void		1175
nim	b2Shape_SetSegment	box2d/api.html#b2Shape_SetSegment,b2ShapeId,ptr.b2Segment	proc b2Shape_SetSegment(shapeId: b2ShapeId; segment: ptr b2Segment): void		1177
nim	b2Shape_SetPolygon	box2d/api.html#b2Shape_SetPolygon,b2ShapeId,ptr.b2Polygon	proc b2Shape_SetPolygon(shapeId: b2ShapeId; polygon: ptr b2Polygon): void		1179
nim	b2Shape_GetParentChain	box2d/api.html#b2Shape_GetParentChain,b2ShapeId	proc b2Shape_GetParentChain(shapeId: b2ShapeId): b2ChainId		1181
nim	b2Shape_GetContactCapacity	box2d/api.html#b2Shape_GetContactCapacity,b2ShapeId	proc b2Shape_GetContactCapacity(shapeId: b2ShapeId): cint		1183
nim	b2Shape_GetContactData	box2d/api.html#b2Shape_GetContactData,b2ShapeId,ptr.b2ContactData,cint	proc b2Shape_GetContactData(shapeId: b2ShapeId; contactData: ptr b2ContactData;\n                       capacity: cint): cint		1185
nim	b2Shape_GetAABB	box2d/api.html#b2Shape_GetAABB,b2ShapeId	proc b2Shape_GetAABB(shapeId: b2ShapeId): b2AABB		1187
nim	b2Shape_GetClosestPoint	box2d/api.html#b2Shape_GetClosestPoint,b2ShapeId,b2Vec2	proc b2Shape_GetClosestPoint(shapeId: b2ShapeId; target: b2Vec2): b2Vec2		1189
nim	b2CreateChain	box2d/api.html#b2CreateChain,b2BodyId,ptr.b2ChainDef	proc b2CreateChain(bodyId: b2BodyId; def: ptr b2ChainDef): b2ChainId		1191
nim	b2DestroyChain	box2d/api.html#b2DestroyChain,b2ChainId	proc b2DestroyChain(chainId: b2ChainId): void		1193
nim	b2Chain_SetFriction	box2d/api.html#b2Chain_SetFriction,b2ChainId,cfloat	proc b2Chain_SetFriction(chainId: b2ChainId; friction: cfloat): void		1195
nim	b2Chain_SetRestitution	box2d/api.html#b2Chain_SetRestitution,b2ChainId,cfloat	proc b2Chain_SetRestitution(chainId: b2ChainId; restitution: cfloat): void		1197
nim	b2Chain_IsValid	box2d/api.html#b2Chain_IsValid,b2ChainId	proc b2Chain_IsValid(id: b2ChainId): bool		1199
nim	b2DestroyJoint	box2d/api.html#b2DestroyJoint,b2JointId	proc b2DestroyJoint(jointId: b2JointId): void		1201
nim	b2Joint_IsValid	box2d/api.html#b2Joint_IsValid,b2JointId	proc b2Joint_IsValid(id: b2JointId): bool		1203
nim	b2Joint_GetType	box2d/api.html#b2Joint_GetType,b2JointId	proc b2Joint_GetType(jointId: b2JointId): b2JointType		1205
nim	b2Joint_GetBodyA	box2d/api.html#b2Joint_GetBodyA,b2JointId	proc b2Joint_GetBodyA(jointId: b2JointId): b2BodyId		1207
nim	b2Joint_GetBodyB	box2d/api.html#b2Joint_GetBodyB,b2JointId	proc b2Joint_GetBodyB(jointId: b2JointId): b2BodyId		1209
nim	b2Joint_GetLocalAnchorA	box2d/api.html#b2Joint_GetLocalAnchorA,b2JointId	proc b2Joint_GetLocalAnchorA(jointId: b2JointId): b2Vec2		1211
nim	b2Joint_GetLocalAnchorB	box2d/api.html#b2Joint_GetLocalAnchorB,b2JointId	proc b2Joint_GetLocalAnchorB(jointId: b2JointId): b2Vec2		1213
nim	b2Joint_SetCollideConnected	box2d/api.html#b2Joint_SetCollideConnected,b2JointId,bool	proc b2Joint_SetCollideConnected(jointId: b2JointId; shouldCollide: bool): void		1215
nim	b2Joint_GetCollideConnected	box2d/api.html#b2Joint_GetCollideConnected,b2JointId	proc b2Joint_GetCollideConnected(jointId: b2JointId): bool		1217
nim	b2Joint_SetUserData	box2d/api.html#b2Joint_SetUserData,b2JointId,pointer	proc b2Joint_SetUserData(jointId: b2JointId; userData: pointer): void		1219
nim	b2Joint_GetUserData	box2d/api.html#b2Joint_GetUserData,b2JointId	proc b2Joint_GetUserData(jointId: b2JointId): pointer		1221
nim	b2Joint_WakeBodies	box2d/api.html#b2Joint_WakeBodies,b2JointId	proc b2Joint_WakeBodies(jointId: b2JointId): void		1223
nim	b2Joint_GetConstraintForce	box2d/api.html#b2Joint_GetConstraintForce,b2JointId	proc b2Joint_GetConstraintForce(jointId: b2JointId): b2Vec2		1225
nim	b2Joint_GetConstraintTorque	box2d/api.html#b2Joint_GetConstraintTorque,b2JointId	proc b2Joint_GetConstraintTorque(jointId: b2JointId): cfloat		1227
nim	b2CreateDistanceJoint	box2d/api.html#b2CreateDistanceJoint,b2WorldId,ptr.b2DistanceJointDef	proc b2CreateDistanceJoint(worldId: b2WorldId; def: ptr b2DistanceJointDef): b2JointId		1229
nim	b2DistanceJoint_SetLength	box2d/api.html#b2DistanceJoint_SetLength,b2JointId,cfloat	proc b2DistanceJoint_SetLength(jointId: b2JointId; length: cfloat): void		1231
nim	b2DistanceJoint_GetLength	box2d/api.html#b2DistanceJoint_GetLength,b2JointId	proc b2DistanceJoint_GetLength(jointId: b2JointId): cfloat		1233
nim	b2DistanceJoint_EnableSpring	box2d/api.html#b2DistanceJoint_EnableSpring,b2JointId,bool	proc b2DistanceJoint_EnableSpring(jointId: b2JointId; enableSpring: bool): void		1235
nim	b2DistanceJoint_IsSpringEnabled	box2d/api.html#b2DistanceJoint_IsSpringEnabled,b2JointId	proc b2DistanceJoint_IsSpringEnabled(jointId: b2JointId): bool		1237
nim	b2DistanceJoint_SetSpringHertz	box2d/api.html#b2DistanceJoint_SetSpringHertz,b2JointId,cfloat	proc b2DistanceJoint_SetSpringHertz(jointId: b2JointId; hertz: cfloat): void		1239
nim	b2DistanceJoint_SetSpringDampingRatio	box2d/api.html#b2DistanceJoint_SetSpringDampingRatio,b2JointId,cfloat	proc b2DistanceJoint_SetSpringDampingRatio(jointId: b2JointId; dampingRatio: cfloat): void		1241
nim	b2DistanceJoint_GetHertz	box2d/api.html#b2DistanceJoint_GetHertz,b2JointId	proc b2DistanceJoint_GetHertz(jointId: b2JointId): cfloat		1243
nim	b2DistanceJoint_GetDampingRatio	box2d/api.html#b2DistanceJoint_GetDampingRatio,b2JointId	proc b2DistanceJoint_GetDampingRatio(jointId: b2JointId): cfloat		1245
nim	b2DistanceJoint_EnableLimit	box2d/api.html#b2DistanceJoint_EnableLimit,b2JointId,bool	proc b2DistanceJoint_EnableLimit(jointId: b2JointId; enableLimit: bool): void		1247
nim	b2DistanceJoint_IsLimitEnabled	box2d/api.html#b2DistanceJoint_IsLimitEnabled,b2JointId	proc b2DistanceJoint_IsLimitEnabled(jointId: b2JointId): bool		1249
nim	b2DistanceJoint_SetLengthRange	box2d/api.html#b2DistanceJoint_SetLengthRange,b2JointId,cfloat,cfloat	proc b2DistanceJoint_SetLengthRange(jointId: b2JointId; minLength: cfloat;\n                               maxLength: cfloat): void		1251
nim	b2DistanceJoint_GetMinLength	box2d/api.html#b2DistanceJoint_GetMinLength,b2JointId	proc b2DistanceJoint_GetMinLength(jointId: b2JointId): cfloat		1253
nim	b2DistanceJoint_GetMaxLength	box2d/api.html#b2DistanceJoint_GetMaxLength,b2JointId	proc b2DistanceJoint_GetMaxLength(jointId: b2JointId): cfloat		1255
nim	b2DistanceJoint_GetCurrentLength	box2d/api.html#b2DistanceJoint_GetCurrentLength,b2JointId	proc b2DistanceJoint_GetCurrentLength(jointId: b2JointId): cfloat		1257
nim	b2DistanceJoint_EnableMotor	box2d/api.html#b2DistanceJoint_EnableMotor,b2JointId,bool	proc b2DistanceJoint_EnableMotor(jointId: b2JointId; enableMotor: bool): void		1259
nim	b2DistanceJoint_IsMotorEnabled	box2d/api.html#b2DistanceJoint_IsMotorEnabled,b2JointId	proc b2DistanceJoint_IsMotorEnabled(jointId: b2JointId): bool		1261
nim	b2DistanceJoint_SetMotorSpeed	box2d/api.html#b2DistanceJoint_SetMotorSpeed,b2JointId,cfloat	proc b2DistanceJoint_SetMotorSpeed(jointId: b2JointId; motorSpeed: cfloat): void		1263
nim	b2DistanceJoint_GetMotorSpeed	box2d/api.html#b2DistanceJoint_GetMotorSpeed,b2JointId	proc b2DistanceJoint_GetMotorSpeed(jointId: b2JointId): cfloat		1265
nim	b2DistanceJoint_SetMaxMotorForce	box2d/api.html#b2DistanceJoint_SetMaxMotorForce,b2JointId,cfloat	proc b2DistanceJoint_SetMaxMotorForce(jointId: b2JointId; force: cfloat): void		1267
nim	b2DistanceJoint_GetMaxMotorForce	box2d/api.html#b2DistanceJoint_GetMaxMotorForce,b2JointId	proc b2DistanceJoint_GetMaxMotorForce(jointId: b2JointId): cfloat		1269
nim	b2DistanceJoint_GetMotorForce	box2d/api.html#b2DistanceJoint_GetMotorForce,b2JointId	proc b2DistanceJoint_GetMotorForce(jointId: b2JointId): cfloat		1271
nim	b2CreateMotorJoint	box2d/api.html#b2CreateMotorJoint,b2WorldId,ptr.b2MotorJointDef	proc b2CreateMotorJoint(worldId: b2WorldId; def: ptr b2MotorJointDef): b2JointId		1273
nim	b2MotorJoint_SetLinearOffset	box2d/api.html#b2MotorJoint_SetLinearOffset,b2JointId,b2Vec2	proc b2MotorJoint_SetLinearOffset(jointId: b2JointId; linearOffset: b2Vec2): void		1275
nim	b2MotorJoint_GetLinearOffset	box2d/api.html#b2MotorJoint_GetLinearOffset,b2JointId	proc b2MotorJoint_GetLinearOffset(jointId: b2JointId): b2Vec2		1277
nim	b2MotorJoint_SetAngularOffset	box2d/api.html#b2MotorJoint_SetAngularOffset,b2JointId,cfloat	proc b2MotorJoint_SetAngularOffset(jointId: b2JointId; angularOffset: cfloat): void		1279
nim	b2MotorJoint_GetAngularOffset	box2d/api.html#b2MotorJoint_GetAngularOffset,b2JointId	proc b2MotorJoint_GetAngularOffset(jointId: b2JointId): cfloat		1281
nim	b2MotorJoint_SetMaxForce	box2d/api.html#b2MotorJoint_SetMaxForce,b2JointId,cfloat	proc b2MotorJoint_SetMaxForce(jointId: b2JointId; maxForce: cfloat): void		1283
nim	b2MotorJoint_GetMaxForce	box2d/api.html#b2MotorJoint_GetMaxForce,b2JointId	proc b2MotorJoint_GetMaxForce(jointId: b2JointId): cfloat		1285
nim	b2MotorJoint_SetMaxTorque	box2d/api.html#b2MotorJoint_SetMaxTorque,b2JointId,cfloat	proc b2MotorJoint_SetMaxTorque(jointId: b2JointId; maxTorque: cfloat): void		1287
nim	b2MotorJoint_GetMaxTorque	box2d/api.html#b2MotorJoint_GetMaxTorque,b2JointId	proc b2MotorJoint_GetMaxTorque(jointId: b2JointId): cfloat		1289
nim	b2MotorJoint_SetCorrectionFactor	box2d/api.html#b2MotorJoint_SetCorrectionFactor,b2JointId,cfloat	proc b2MotorJoint_SetCorrectionFactor(jointId: b2JointId; correctionFactor: cfloat): void		1291
nim	b2MotorJoint_GetCorrectionFactor	box2d/api.html#b2MotorJoint_GetCorrectionFactor,b2JointId	proc b2MotorJoint_GetCorrectionFactor(jointId: b2JointId): cfloat		1293
nim	b2CreateMouseJoint	box2d/api.html#b2CreateMouseJoint,b2WorldId,ptr.b2MouseJointDef	proc b2CreateMouseJoint(worldId: b2WorldId; def: ptr b2MouseJointDef): b2JointId		1295
nim	b2MouseJoint_SetTarget	box2d/api.html#b2MouseJoint_SetTarget,b2JointId,b2Vec2	proc b2MouseJoint_SetTarget(jointId: b2JointId; target: b2Vec2): void		1297
nim	b2MouseJoint_GetTarget	box2d/api.html#b2MouseJoint_GetTarget,b2JointId	proc b2MouseJoint_GetTarget(jointId: b2JointId): b2Vec2		1299
nim	b2MouseJoint_SetSpringHertz	box2d/api.html#b2MouseJoint_SetSpringHertz,b2JointId,cfloat	proc b2MouseJoint_SetSpringHertz(jointId: b2JointId; hertz: cfloat): void		1301
nim	b2MouseJoint_GetSpringHertz	box2d/api.html#b2MouseJoint_GetSpringHertz,b2JointId	proc b2MouseJoint_GetSpringHertz(jointId: b2JointId): cfloat		1303
nim	b2MouseJoint_SetSpringDampingRatio	box2d/api.html#b2MouseJoint_SetSpringDampingRatio,b2JointId,cfloat	proc b2MouseJoint_SetSpringDampingRatio(jointId: b2JointId; dampingRatio: cfloat): void		1305
nim	b2MouseJoint_GetSpringDampingRatio	box2d/api.html#b2MouseJoint_GetSpringDampingRatio,b2JointId	proc b2MouseJoint_GetSpringDampingRatio(jointId: b2JointId): cfloat		1307
nim	b2MouseJoint_SetMaxForce	box2d/api.html#b2MouseJoint_SetMaxForce,b2JointId,cfloat	proc b2MouseJoint_SetMaxForce(jointId: b2JointId; maxForce: cfloat): void		1309
nim	b2MouseJoint_GetMaxForce	box2d/api.html#b2MouseJoint_GetMaxForce,b2JointId	proc b2MouseJoint_GetMaxForce(jointId: b2JointId): cfloat		1311
nim	b2CreatePrismaticJoint	box2d/api.html#b2CreatePrismaticJoint,b2WorldId,ptr.b2PrismaticJointDef	proc b2CreatePrismaticJoint(worldId: b2WorldId; def: ptr b2PrismaticJointDef): b2JointId		1313
nim	b2PrismaticJoint_EnableSpring	box2d/api.html#b2PrismaticJoint_EnableSpring,b2JointId,bool	proc b2PrismaticJoint_EnableSpring(jointId: b2JointId; enableSpring: bool): void		1315
nim	b2PrismaticJoint_IsSpringEnabled	box2d/api.html#b2PrismaticJoint_IsSpringEnabled,b2JointId	proc b2PrismaticJoint_IsSpringEnabled(jointId: b2JointId): bool		1317
nim	b2PrismaticJoint_SetSpringHertz	box2d/api.html#b2PrismaticJoint_SetSpringHertz,b2JointId,cfloat	proc b2PrismaticJoint_SetSpringHertz(jointId: b2JointId; hertz: cfloat): void		1319
nim	b2PrismaticJoint_GetSpringHertz	box2d/api.html#b2PrismaticJoint_GetSpringHertz,b2JointId	proc b2PrismaticJoint_GetSpringHertz(jointId: b2JointId): cfloat		1321
nim	b2PrismaticJoint_SetSpringDampingRatio	box2d/api.html#b2PrismaticJoint_SetSpringDampingRatio,b2JointId,cfloat	proc b2PrismaticJoint_SetSpringDampingRatio(jointId: b2JointId; dampingRatio: cfloat): void		1323
nim	b2PrismaticJoint_GetSpringDampingRatio	box2d/api.html#b2PrismaticJoint_GetSpringDampingRatio,b2JointId	proc b2PrismaticJoint_GetSpringDampingRatio(jointId: b2JointId): cfloat		1325
nim	b2PrismaticJoint_EnableLimit	box2d/api.html#b2PrismaticJoint_EnableLimit,b2JointId,bool	proc b2PrismaticJoint_EnableLimit(jointId: b2JointId; enableLimit: bool): void		1327
nim	b2PrismaticJoint_IsLimitEnabled	box2d/api.html#b2PrismaticJoint_IsLimitEnabled,b2JointId	proc b2PrismaticJoint_IsLimitEnabled(jointId: b2JointId): bool		1329
nim	b2PrismaticJoint_GetLowerLimit	box2d/api.html#b2PrismaticJoint_GetLowerLimit,b2JointId	proc b2PrismaticJoint_GetLowerLimit(jointId: b2JointId): cfloat		1331
nim	b2PrismaticJoint_GetUpperLimit	box2d/api.html#b2PrismaticJoint_GetUpperLimit,b2JointId	proc b2PrismaticJoint_GetUpperLimit(jointId: b2JointId): cfloat		1333
nim	b2PrismaticJoint_SetLimits	box2d/api.html#b2PrismaticJoint_SetLimits,b2JointId,cfloat,cfloat	proc b2PrismaticJoint_SetLimits(jointId: b2JointId; lower: cfloat; upper: cfloat): void		1335
nim	b2PrismaticJoint_EnableMotor	box2d/api.html#b2PrismaticJoint_EnableMotor,b2JointId,bool	proc b2PrismaticJoint_EnableMotor(jointId: b2JointId; enableMotor: bool): void		1337
nim	b2PrismaticJoint_IsMotorEnabled	box2d/api.html#b2PrismaticJoint_IsMotorEnabled,b2JointId	proc b2PrismaticJoint_IsMotorEnabled(jointId: b2JointId): bool		1339
nim	b2PrismaticJoint_SetMotorSpeed	box2d/api.html#b2PrismaticJoint_SetMotorSpeed,b2JointId,cfloat	proc b2PrismaticJoint_SetMotorSpeed(jointId: b2JointId; motorSpeed: cfloat): void		1341
nim	b2PrismaticJoint_GetMotorSpeed	box2d/api.html#b2PrismaticJoint_GetMotorSpeed,b2JointId	proc b2PrismaticJoint_GetMotorSpeed(jointId: b2JointId): cfloat		1343
nim	b2PrismaticJoint_SetMaxMotorForce	box2d/api.html#b2PrismaticJoint_SetMaxMotorForce,b2JointId,cfloat	proc b2PrismaticJoint_SetMaxMotorForce(jointId: b2JointId; force: cfloat): void		1345
nim	b2PrismaticJoint_GetMaxMotorForce	box2d/api.html#b2PrismaticJoint_GetMaxMotorForce,b2JointId	proc b2PrismaticJoint_GetMaxMotorForce(jointId: b2JointId): cfloat		1347
nim	b2PrismaticJoint_GetMotorForce	box2d/api.html#b2PrismaticJoint_GetMotorForce,b2JointId	proc b2PrismaticJoint_GetMotorForce(jointId: b2JointId): cfloat		1349
nim	b2CreateRevoluteJoint	box2d/api.html#b2CreateRevoluteJoint,b2WorldId,ptr.b2RevoluteJointDef	proc b2CreateRevoluteJoint(worldId: b2WorldId; def: ptr b2RevoluteJointDef): b2JointId		1351
nim	b2RevoluteJoint_EnableSpring	box2d/api.html#b2RevoluteJoint_EnableSpring,b2JointId,bool	proc b2RevoluteJoint_EnableSpring(jointId: b2JointId; enableSpring: bool): void		1353
nim	b2RevoluteJoint_SetSpringHertz	box2d/api.html#b2RevoluteJoint_SetSpringHertz,b2JointId,cfloat	proc b2RevoluteJoint_SetSpringHertz(jointId: b2JointId; hertz: cfloat): void		1355
nim	b2RevoluteJoint_GetSpringHertz	box2d/api.html#b2RevoluteJoint_GetSpringHertz,b2JointId	proc b2RevoluteJoint_GetSpringHertz(jointId: b2JointId): cfloat		1357
nim	b2RevoluteJoint_SetSpringDampingRatio	box2d/api.html#b2RevoluteJoint_SetSpringDampingRatio,b2JointId,cfloat	proc b2RevoluteJoint_SetSpringDampingRatio(jointId: b2JointId; dampingRatio: cfloat): void		1359
nim	b2RevoluteJoint_GetSpringDampingRatio	box2d/api.html#b2RevoluteJoint_GetSpringDampingRatio,b2JointId	proc b2RevoluteJoint_GetSpringDampingRatio(jointId: b2JointId): cfloat		1361
nim	b2RevoluteJoint_GetAngle	box2d/api.html#b2RevoluteJoint_GetAngle,b2JointId	proc b2RevoluteJoint_GetAngle(jointId: b2JointId): cfloat		1363
nim	b2RevoluteJoint_EnableLimit	box2d/api.html#b2RevoluteJoint_EnableLimit,b2JointId,bool	proc b2RevoluteJoint_EnableLimit(jointId: b2JointId; enableLimit: bool): void		1365
nim	b2RevoluteJoint_IsLimitEnabled	box2d/api.html#b2RevoluteJoint_IsLimitEnabled,b2JointId	proc b2RevoluteJoint_IsLimitEnabled(jointId: b2JointId): bool		1367
nim	b2RevoluteJoint_GetLowerLimit	box2d/api.html#b2RevoluteJoint_GetLowerLimit,b2JointId	proc b2RevoluteJoint_GetLowerLimit(jointId: b2JointId): cfloat		1369
nim	b2RevoluteJoint_GetUpperLimit	box2d/api.html#b2RevoluteJoint_GetUpperLimit,b2JointId	proc b2RevoluteJoint_GetUpperLimit(jointId: b2JointId): cfloat		1371
nim	b2RevoluteJoint_SetLimits	box2d/api.html#b2RevoluteJoint_SetLimits,b2JointId,cfloat,cfloat	proc b2RevoluteJoint_SetLimits(jointId: b2JointId; lower: cfloat; upper: cfloat): void		1373
nim	b2RevoluteJoint_EnableMotor	box2d/api.html#b2RevoluteJoint_EnableMotor,b2JointId,bool	proc b2RevoluteJoint_EnableMotor(jointId: b2JointId; enableMotor: bool): void		1375
nim	b2RevoluteJoint_IsMotorEnabled	box2d/api.html#b2RevoluteJoint_IsMotorEnabled,b2JointId	proc b2RevoluteJoint_IsMotorEnabled(jointId: b2JointId): bool		1377
nim	b2RevoluteJoint_SetMotorSpeed	box2d/api.html#b2RevoluteJoint_SetMotorSpeed,b2JointId,cfloat	proc b2RevoluteJoint_SetMotorSpeed(jointId: b2JointId; motorSpeed: cfloat): void		1379
nim	b2RevoluteJoint_GetMotorSpeed	box2d/api.html#b2RevoluteJoint_GetMotorSpeed,b2JointId	proc b2RevoluteJoint_GetMotorSpeed(jointId: b2JointId): cfloat		1381
nim	b2RevoluteJoint_GetMotorTorque	box2d/api.html#b2RevoluteJoint_GetMotorTorque,b2JointId	proc b2RevoluteJoint_GetMotorTorque(jointId: b2JointId): cfloat		1383
nim	b2RevoluteJoint_SetMaxMotorTorque	box2d/api.html#b2RevoluteJoint_SetMaxMotorTorque,b2JointId,cfloat	proc b2RevoluteJoint_SetMaxMotorTorque(jointId: b2JointId; torque: cfloat): void		1385
nim	b2RevoluteJoint_GetMaxMotorTorque	box2d/api.html#b2RevoluteJoint_GetMaxMotorTorque,b2JointId	proc b2RevoluteJoint_GetMaxMotorTorque(jointId: b2JointId): cfloat		1387
nim	b2CreateWeldJoint	box2d/api.html#b2CreateWeldJoint,b2WorldId,ptr.b2WeldJointDef	proc b2CreateWeldJoint(worldId: b2WorldId; def: ptr b2WeldJointDef): b2JointId		1389
nim	b2WeldJoint_SetLinearHertz	box2d/api.html#b2WeldJoint_SetLinearHertz,b2JointId,cfloat	proc b2WeldJoint_SetLinearHertz(jointId: b2JointId; hertz: cfloat): void		1391
nim	b2WeldJoint_GetLinearHertz	box2d/api.html#b2WeldJoint_GetLinearHertz,b2JointId	proc b2WeldJoint_GetLinearHertz(jointId: b2JointId): cfloat		1393
nim	b2WeldJoint_SetLinearDampingRatio	box2d/api.html#b2WeldJoint_SetLinearDampingRatio,b2JointId,cfloat	proc b2WeldJoint_SetLinearDampingRatio(jointId: b2JointId; dampingRatio: cfloat): void		1395
nim	b2WeldJoint_GetLinearDampingRatio	box2d/api.html#b2WeldJoint_GetLinearDampingRatio,b2JointId	proc b2WeldJoint_GetLinearDampingRatio(jointId: b2JointId): cfloat		1397
nim	b2WeldJoint_SetAngularHertz	box2d/api.html#b2WeldJoint_SetAngularHertz,b2JointId,cfloat	proc b2WeldJoint_SetAngularHertz(jointId: b2JointId; hertz: cfloat): void		1399
nim	b2WeldJoint_GetAngularHertz	box2d/api.html#b2WeldJoint_GetAngularHertz,b2JointId	proc b2WeldJoint_GetAngularHertz(jointId: b2JointId): cfloat		1401
nim	b2WeldJoint_SetAngularDampingRatio	box2d/api.html#b2WeldJoint_SetAngularDampingRatio,b2JointId,cfloat	proc b2WeldJoint_SetAngularDampingRatio(jointId: b2JointId; dampingRatio: cfloat): void		1403
nim	b2WeldJoint_GetAngularDampingRatio	box2d/api.html#b2WeldJoint_GetAngularDampingRatio,b2JointId	proc b2WeldJoint_GetAngularDampingRatio(jointId: b2JointId): cfloat		1405
nim	b2CreateWheelJoint	box2d/api.html#b2CreateWheelJoint,b2WorldId,ptr.b2WheelJointDef	proc b2CreateWheelJoint(worldId: b2WorldId; def: ptr b2WheelJointDef): b2JointId		1407
nim	b2WheelJoint_EnableSpring	box2d/api.html#b2WheelJoint_EnableSpring,b2JointId,bool	proc b2WheelJoint_EnableSpring(jointId: b2JointId; enableSpring: bool): void		1409
nim	b2WheelJoint_IsSpringEnabled	box2d/api.html#b2WheelJoint_IsSpringEnabled,b2JointId	proc b2WheelJoint_IsSpringEnabled(jointId: b2JointId): bool		1411
nim	b2WheelJoint_SetSpringHertz	box2d/api.html#b2WheelJoint_SetSpringHertz,b2JointId,cfloat	proc b2WheelJoint_SetSpringHertz(jointId: b2JointId; hertz: cfloat): void		1413
nim	b2WheelJoint_GetSpringHertz	box2d/api.html#b2WheelJoint_GetSpringHertz,b2JointId	proc b2WheelJoint_GetSpringHertz(jointId: b2JointId): cfloat		1415
nim	b2WheelJoint_SetSpringDampingRatio	box2d/api.html#b2WheelJoint_SetSpringDampingRatio,b2JointId,cfloat	proc b2WheelJoint_SetSpringDampingRatio(jointId: b2JointId; dampingRatio: cfloat): void		1417
nim	b2WheelJoint_GetSpringDampingRatio	box2d/api.html#b2WheelJoint_GetSpringDampingRatio,b2JointId	proc b2WheelJoint_GetSpringDampingRatio(jointId: b2JointId): cfloat		1419
nim	b2WheelJoint_EnableLimit	box2d/api.html#b2WheelJoint_EnableLimit,b2JointId,bool	proc b2WheelJoint_EnableLimit(jointId: b2JointId; enableLimit: bool): void		1421
nim	b2WheelJoint_IsLimitEnabled	box2d/api.html#b2WheelJoint_IsLimitEnabled,b2JointId	proc b2WheelJoint_IsLimitEnabled(jointId: b2JointId): bool		1423
nim	b2WheelJoint_GetLowerLimit	box2d/api.html#b2WheelJoint_GetLowerLimit,b2JointId	proc b2WheelJoint_GetLowerLimit(jointId: b2JointId): cfloat		1425
nim	b2WheelJoint_GetUpperLimit	box2d/api.html#b2WheelJoint_GetUpperLimit,b2JointId	proc b2WheelJoint_GetUpperLimit(jointId: b2JointId): cfloat		1427
nim	b2WheelJoint_SetLimits	box2d/api.html#b2WheelJoint_SetLimits,b2JointId,cfloat,cfloat	proc b2WheelJoint_SetLimits(jointId: b2JointId; lower: cfloat; upper: cfloat): void		1429
nim	b2WheelJoint_EnableMotor	box2d/api.html#b2WheelJoint_EnableMotor,b2JointId,bool	proc b2WheelJoint_EnableMotor(jointId: b2JointId; enableMotor: bool): void		1431
nim	b2WheelJoint_IsMotorEnabled	box2d/api.html#b2WheelJoint_IsMotorEnabled,b2JointId	proc b2WheelJoint_IsMotorEnabled(jointId: b2JointId): bool		1433
nim	b2WheelJoint_SetMotorSpeed	box2d/api.html#b2WheelJoint_SetMotorSpeed,b2JointId,cfloat	proc b2WheelJoint_SetMotorSpeed(jointId: b2JointId; motorSpeed: cfloat): void		1435
nim	b2WheelJoint_GetMotorSpeed	box2d/api.html#b2WheelJoint_GetMotorSpeed,b2JointId	proc b2WheelJoint_GetMotorSpeed(jointId: b2JointId): cfloat		1437
nim	b2WheelJoint_SetMaxMotorTorque	box2d/api.html#b2WheelJoint_SetMaxMotorTorque,b2JointId,cfloat	proc b2WheelJoint_SetMaxMotorTorque(jointId: b2JointId; torque: cfloat): void		1439
nim	b2WheelJoint_GetMaxMotorTorque	box2d/api.html#b2WheelJoint_GetMaxMotorTorque,b2JointId	proc b2WheelJoint_GetMaxMotorTorque(jointId: b2JointId): cfloat		1441
nim	b2WheelJoint_GetMotorTorque	box2d/api.html#b2WheelJoint_GetMotorTorque,b2JointId	proc b2WheelJoint_GetMotorTorque(jointId: b2JointId): cfloat		1443
nim	b2Dot	box2d/api.html#b2Dot.t,b2Vec2,b2Vec2	template b2Dot(a: b2Vec2; b: b2Vec2): cfloat		16
nim	b2Cross	box2d/api.html#b2Cross.t,b2Vec2,b2Vec2	template b2Cross(a: b2Vec2; b: b2Vec2): cfloat		22
nim	b2CrossVS	box2d/api.html#b2CrossVS.t,b2Vec2,cfloat	template b2CrossVS(v: b2Vec2; s: cfloat): b2Vec2		28
nim	b2CrossSV	box2d/api.html#b2CrossSV.t,cfloat,b2Vec2	template b2CrossSV(s: cfloat; v: b2Vec2): b2Vec2		34
nim	b2LeftPerp	box2d/api.html#b2LeftPerp.t,b2Vec2	template b2LeftPerp(v: b2Vec2): b2Vec2		40
nim	b2RightPerp	box2d/api.html#b2RightPerp.t,b2Vec2	template b2RightPerp(v: b2Vec2): b2Vec2		46
nim	b2Add	box2d/api.html#b2Add.t,b2Vec2,b2Vec2	template b2Add(a: b2Vec2; b: b2Vec2): b2Vec2		52
nim	b2Sub	box2d/api.html#b2Sub.t,b2Vec2,b2Vec2	template b2Sub(a: b2Vec2; b: b2Vec2): b2Vec2		58
nim	b2Neg	box2d/api.html#b2Neg.t,b2Vec2	template b2Neg(a: b2Vec2): b2Vec2		64
nim	b2Lerp	box2d/api.html#b2Lerp.t,b2Vec2,b2Vec2,cfloat	template b2Lerp(a: b2Vec2; b: b2Vec2; t: cfloat): b2Vec2		70
nim	b2Mul	box2d/api.html#b2Mul.t,b2Vec2,b2Vec2	template b2Mul(a: b2Vec2; b: b2Vec2): b2Vec2		76
nim	b2MulSV	box2d/api.html#b2MulSV.t,cfloat,b2Vec2	template b2MulSV(s: cfloat; v: b2Vec2): b2Vec2		82
nim	b2MulAdd	box2d/api.html#b2MulAdd.t,b2Vec2,cfloat,b2Vec2	template b2MulAdd(a: b2Vec2; s: cfloat; b: b2Vec2): b2Vec2		88
nim	b2MulSub	box2d/api.html#b2MulSub.t,b2Vec2,cfloat,b2Vec2	template b2MulSub(a: b2Vec2; s: cfloat; b: b2Vec2): b2Vec2		94
nim	b2Abs	box2d/api.html#b2Abs.t,b2Vec2	template b2Abs(a: b2Vec2): b2Vec2		100
nim	b2Min	box2d/api.html#b2Min.t,b2Vec2,b2Vec2	template b2Min(a: b2Vec2; b: b2Vec2): b2Vec2		106
nim	b2Max	box2d/api.html#b2Max.t,b2Vec2,b2Vec2	template b2Max(a: b2Vec2; b: b2Vec2): b2Vec2		112
nim	b2Clamp	box2d/api.html#b2Clamp.t,b2Vec2,b2Vec2,b2Vec2	template b2Clamp(v: b2Vec2; a: b2Vec2; b: b2Vec2): b2Vec2		118
nim	b2Length	box2d/api.html#b2Length.t,b2Vec2	template b2Length(v: b2Vec2): cfloat		124
nim	b2LengthSquared	box2d/api.html#b2LengthSquared.t,b2Vec2	template b2LengthSquared(v: b2Vec2): cfloat		130
nim	b2Distance	box2d/api.html#b2Distance,b2Vec2,b2Vec2	proc b2Distance(a: b2Vec2; b: b2Vec2): cfloat		136
nim	b2DistanceSquared	box2d/api.html#b2DistanceSquared,b2Vec2,b2Vec2	proc b2DistanceSquared(a: b2Vec2; b: b2Vec2): cfloat		144
nim	b2MakeRot	box2d/api.html#b2MakeRot.t,cfloat	template b2MakeRot(angle: cfloat): b2Rot		152
nim	b2NormalizeRot	box2d/api.html#b2NormalizeRot,b2Rot	proc b2NormalizeRot(q: b2Rot): b2Rot		158
nim	b2IsNormalized	box2d/api.html#b2IsNormalized,b2Rot	proc b2IsNormalized(q: b2Rot): bool		173
nim	b2NLerp	box2d/api.html#b2NLerp,b2Rot,b2Rot,cfloat	proc b2NLerp(q1: b2Rot; q2: b2Rot; t: cfloat): b2Rot		180
nim	b2IntegrateRotation	box2d/api.html#b2IntegrateRotation,b2Rot,cfloat	proc b2IntegrateRotation(q1: b2Rot; deltaAngle: cfloat): b2Rot		192
nim	b2ComputeAngularVelocity	box2d/api.html#b2ComputeAngularVelocity.t,b2Rot,b2Rot,cfloat	template b2ComputeAngularVelocity(q1: b2Rot; q2: b2Rot; inv_h: cfloat): cfloat		206
nim	b2Rot_GetAngle	box2d/api.html#b2Rot_GetAngle.t,b2Rot	template b2Rot_GetAngle(q: b2Rot): cfloat		212
nim	b2Rot_GetXAxis	box2d/api.html#b2Rot_GetXAxis.t,b2Rot	template b2Rot_GetXAxis(q: b2Rot): b2Vec2		218
nim	b2Rot_GetYAxis	box2d/api.html#b2Rot_GetYAxis.t,b2Rot	template b2Rot_GetYAxis(q: b2Rot): b2Vec2		224
nim	b2MulRot	box2d/api.html#b2MulRot.t,b2Rot,b2Rot	template b2MulRot(q: b2Rot; r: b2Rot): b2Rot		230
nim	b2InvMulRot	box2d/api.html#b2InvMulRot.t,b2Rot,b2Rot	template b2InvMulRot(q: b2Rot; r: b2Rot): b2Rot		236
nim	b2RelativeAngle	box2d/api.html#b2RelativeAngle,b2Rot,b2Rot	proc b2RelativeAngle(a: b2Rot; b: b2Rot): cfloat		242
nim	b2UnwindAngle	box2d/api.html#b2UnwindAngle,cfloat	proc b2UnwindAngle(angle: cfloat): cfloat		250
nim	b2RotateVector	box2d/api.html#b2RotateVector.t,b2Rot,b2Vec2	template b2RotateVector(q: b2Rot; v: b2Vec2): b2Vec2		261
nim	b2InvRotateVector	box2d/api.html#b2InvRotateVector.t,b2Rot,b2Vec2	template b2InvRotateVector(q: b2Rot; v: b2Vec2): b2Vec2		267
nim	b2TransformPoint	box2d/api.html#b2TransformPoint,b2Transform,b2Vec2	proc b2TransformPoint(t: b2Transform; p: b2Vec2): b2Vec2		273
nim	b2InvTransformPoint	box2d/api.html#b2InvTransformPoint,b2Transform,b2Vec2	proc b2InvTransformPoint(t: b2Transform; p: b2Vec2): b2Vec2		282
nim	b2MulTransforms	box2d/api.html#b2MulTransforms,b2Transform,b2Transform	proc b2MulTransforms(A: b2Transform; B: b2Transform): b2Transform		294
nim	b2InvMulTransforms	box2d/api.html#b2InvMulTransforms,b2Transform,b2Transform	proc b2InvMulTransforms(A: b2Transform; B: b2Transform): b2Transform		302
nim	b2MulMV	box2d/api.html#b2MulMV.t,b2Mat22,b2Vec2	template b2MulMV(A: b2Mat22; v: b2Vec2): b2Vec2		310
nim	b2GetInverse22	box2d/api.html#b2GetInverse22,b2Mat22	proc b2GetInverse22(A: b2Mat22): b2Mat22		319
nim	b2Solve22	box2d/api.html#b2Solve22,b2Mat22,b2Vec2	proc b2Solve22(A: b2Mat22; b: b2Vec2): b2Vec2		339
nim	b2AABB_Contains	box2d/api.html#b2AABB_Contains,b2AABB,b2AABB	proc b2AABB_Contains(a: b2AABB; b: b2AABB): bool		356
nim	b2AABB_Center	box2d/api.html#b2AABB_Center.t,b2AABB	template b2AABB_Center(a: b2AABB): b2Vec2		367
nim	b2AABB_Extents	box2d/api.html#b2AABB_Extents.t,b2AABB	template b2AABB_Extents(a: b2AABB): b2Vec2		373
nim	b2AABB_Union	box2d/api.html#b2AABB_Union.t,b2AABB,b2AABB	template b2AABB_Union(a: b2AABB; b: b2AABB): b2AABB		379
nim	b2Perimeter	box2d/api.html#b2Perimeter,b2AABB	proc b2Perimeter(a: b2AABB): cfloat		393
nim	b2EnlargeAABB	box2d/api.html#b2EnlargeAABB,ptr.b2AABB,b2AABB	proc b2EnlargeAABB(a: ptr b2AABB; b: b2AABB): bool		400
nim	b2AABB_ContainsWithMargin	box2d/api.html#b2AABB_ContainsWithMargin.t,b2AABB,b2AABB,cfloat	template b2AABB_ContainsWithMargin(a: b2AABB; b: b2AABB; margin: cfloat): bool		423
nim	b2AABB_Overlaps	box2d/api.html#b2AABB_Overlaps,b2AABB,b2AABB	proc b2AABB_Overlaps(a: b2AABB; b: b2AABB): bool		433
nim	b2IsPowerOf2	box2d/api.html#b2IsPowerOf2.t,cint	template b2IsPowerOf2(x: cint): bool		454
nim	b2BoundingPowerOf2	box2d/api.html#b2BoundingPowerOf2,cint	proc b2BoundingPowerOf2(x: cint): cint		459
nim	b2RoundUpPowerOf2	box2d/api.html#b2RoundUpPowerOf2,cint	proc b2RoundUpPowerOf2(x: cint): cint		467
nim	b2ShapePairKey	box2d/api.html#b2ShapePairKey,uint64,uint64	proc b2ShapePairKey(k1: uint64; k2: uint64): uint64		475
